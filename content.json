{"meta":{"title":"睡醒的兔子","subtitle":"当我们认为自己对这个世界已经相当重要的时候，其实这个世界才刚刚准备原谅我们的幼稚。","description":"不定时分享娱乐内容","author":"Candy","url":"https://lhldream.top"},"pages":[{"title":"","date":"2018-07-12T03:02:01.103Z","updated":"2017-07-28T18:51:08.000Z","comments":true,"path":"photos/lazyload.min.js","permalink":"https://lhldream.top/photos/lazyload.min.js","excerpt":"","text":""},{"title":"photos","date":"2018-07-12T02:58:17.000Z","updated":"2018-07-12T02:58:17.390Z","comments":true,"path":"photos/index.html","permalink":"https://lhldream.top/photos/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-07-11T00:58:17.000Z","updated":"2018-07-11T03:13:36.437Z","comments":true,"path":"categories/index.html","permalink":"https://lhldream.top/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2018-07-11T01:10:26.000Z","updated":"2018-07-11T02:13:06.272Z","comments":true,"path":"about/index.html","permalink":"https://lhldream.top/about/index.html","excerpt":"","text":""},{"title":"相册","slug":"photos","date":"2018-07-12T03:02:00.992Z","updated":"2017-07-28T18:51:08.000Z","comments":false,"path":"photos/index.html","permalink":"https://lhldream.top/photos/index.html","excerpt":"","text":"Ins 摄影 图片来自instagram，正在加载中… (function() { var loadScript = function(path) { var $script = document.createElement('script') document.getElementsByTagName('body')[0].appendChild($script) $script.setAttribute('src', path) } setTimeout(function() { loadScript('./ins.js') }, 0) })()"},{"title":"","date":"2018-07-12T03:02:01.023Z","updated":"2017-07-28T18:51:08.000Z","comments":true,"path":"photos/ins.css","permalink":"https://lhldream.top/photos/ins.css","excerpt":"","text":"#post-instagram{ padding: 30px; } #post-instagram .article-entry{ padding-right: 0; } .instagram{ position: relative; min-height: 500px; } .instagram img { width: 100%; } .instagram .year { font-size: 16px; } .instagram .open-ins{ padding: 10px 0; color: #cdcdcd; } .instagram .open-ins:hover{ color: #657b83; } .instagram .year{ display: inline; } .instagram .thumb { width: 25%; height: 0; padding-bottom: 25%; position: relative; display: inline-block; text-align: center; background: #ededed; } .instagram .thumb a { position: relative; } .instagram .album h1 em{ font-style: normal; font-size: 14px; margin-left: 10px; } .instagram .album ul{ display: flex; flex-wrap: wrap; clear: both; width: 100%; text-align: left; } .instagram .album li{ list-style: none; display: inline-block; box-sizing: border-box; padding: 0 5px; margin-bottom: -10px; height: 0; width: 25%; position: relative; padding-bottom: 25%; } .instagram .album li:before{ display: none; } .instagram .album div.img-box{ position: absolute; width: 90%; height: 90%; -webkit-box-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1); -moz-box-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1); box-shadow: 0 1px 0 rgba(255,255,255,0.4), 0 1px 0 1px rgba(255,255,255,0.1); } .instagram .album div.img-box img{ width: 100%; height: 100%; position: absolute; z-index: 2; } .instagram .album div.img-box .img-bg{ position: absolute; top: 0; left: 0; bottom: 0px; width: 100%; margin: -5px; padding: 5px; -webkit-box-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1); -moz-box-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1); box-shadow: 0 0 0 1px rgba(0,0,0,.04), 0 1px 5px rgba(0,0,0,0.1); -webkit-transition: all 0.15s ease-out 0.1s; -moz-transition: all 0.15s ease-out 0.1s; -o-transition: all 0.15s ease-out 0.1s; transition: all 0.15s ease-out 0.1s; opacity: 0.2; cursor: pointer; display: block; z-index: 3; } .instagram .album div.img-box .icon { font-size: 14px; position: absolute; left: 50%; top: 50%; margin-left: -7px; margin-top: -7px; color: #999; z-index: 1; } .instagram .album div.img-box .img-bg:hover{ opacity: 0; } .photos-btn-wrap { border-bottom: 1px solid #e5e5e5; margin-bottom: 20px; } .photos-btn { font-size: 16px; color: #333; margin-bottom: -4px; padding: 5px 8px 3px; } .photos-btn.active { color: #08c; border: 1px solid #e5e5e5; border-bottom: 5px solid #fff; } @media screen and (max-width:600px) { .instagram .thumb { width: 50%; padding-bottom: 50%; } .instagram .album li { width: 100%; position: relative; padding-bottom: 100%; text-align: center; } .instagram .album div.img-box{ margin: 0; width: 90%; height: 90%; } }"},{"title":"标签","date":"2018-07-11T01:08:31.000Z","updated":"2018-07-11T03:10:53.546Z","comments":true,"path":"tags/index.html","permalink":"https://lhldream.top/tags/index.html","excerpt":"","text":""},{"title":"","date":"2018-07-12T05:33:03.883Z","updated":"2018-07-12T05:33:03.883Z","comments":true,"path":"photos/ins.js","permalink":"https://lhldream.top/photos/ins.js","excerpt":"","text":"/******/ (function(modules) { // webpackBootstrap /******/ // The module cache /******/ var installedModules = {}; /******/ /******/ // The require function /******/ function __webpack_require__(moduleId) { /******/ /******/ // Check if module is in cache /******/ if (installedModules[moduleId]) /******/ return installedModules[moduleId].exports; /******/ /******/ // Create a new module (and put it into the cache) /******/ var module = installedModules[moduleId] = { /******/ exports: {}, /******/ id: moduleId, /******/ loaded: false /******/ }; /******/ /******/ // Execute the module function /******/ modules[moduleId].call(module.exports, module, module.exports, __webpack_require__); /******/ /******/ // Flag the module as loaded /******/ module.loaded = true; /******/ /******/ // Return the exports of the module /******/ return module.exports; /******/ } /******/ /******/ /******/ // expose the modules object (__webpack_modules__) /******/ __webpack_require__.m = modules; /******/ /******/ // expose the module cache /******/ __webpack_require__.c = installedModules; /******/ /******/ // __webpack_public_path__ /******/ __webpack_require__.p = \"/dist/\"; /******/ /******/ // Load entry module and return exports /******/ return __webpack_require__(0); /******/ }) /************************************************************************/ /******/ ([ /* 0 */ /***/ function(module, exports, __webpack_require__) { 'use strict'; __webpack_require__(1); var _view = __webpack_require__(2); var _view2 = _interopRequireDefault(_view); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } /** * @name impush-client * @description 这个项目让我发家致富… * @date 2016-12-1 */ var _collection = []; var _count = 0; var searchData; function addMask(elem) { var rect = elem.getBoundingClientRect(); var style = getComputedStyle(elem, null); var mask = document.createElement('i'); mask.className = 'icon-film'; mask.style.color = '#fff'; mask.style.fontSize = '26px'; mask.style.position = 'absolute'; mask.style.right = '10px'; mask.style.bottom = '10px'; mask.style.zIndex = 1; elem.parentNode.appendChild(mask); } var createVideoIncon = function createVideoIncon() { var $videoImg = document.querySelectorAll('.thumb a[data-type=\"video\"]'); for (var i = 0, len = $videoImg.length; i < len; i++) { addMask($videoImg[i]); } }; var render = function render(res) { var ulTmpl = \"\"; for (var j = 0, len2 = res.list.length; j < len2; j++) { var data = res.list[j].arr; var liTmpl = \"\"; for (var i = 0, len = data.link.length; i < len; i++) { var minSrc = 'https://lhldream.top/2018/07/12/漫步人生路/' + data.link[i]; var src = 'https://lhldream.top/2018/07/12/漫步人生路/' + data.link[i]; var type = data.type[i]; var target = src + (type === 'video' ? '.mp4' : '.jpg'); src += '.jpg'; liTmpl += '\\ \\ \\ \\ ' + data.text[i] + '\\ '; } ulTmpl = ulTmpl + '' + data.year + '' + data.month + '月\\ ' + liTmpl + '\\ '; } document.querySelector('.instagram').innerHTML = '' + ulTmpl + ''; createVideoIncon(); _view2.default.init(); }; var replacer = function replacer(str) { var arr = str.split(\"/\"); return \"/assets/ins/\" + arr[arr.length - 1]; }; var ctrler = function ctrler(data) { var imgObj = {}; for (var i = 0, len = data.length; i < len; i++) { var y = data[i].y; var m = data[i].m; var src = replacer(data[i].src); var text = data[i].text; var key = y + \"\" + ((m + \"\").length == 1 ? \"0\" + m : m); if (imgObj[key]) { imgObj[key].srclist.push(src); imgObj[key].text.push(text); } else { imgObj[key] = { year: y, month: m, srclist: [src], text: [text] }; } } render(imgObj); }; function loadData(success) { if (!searchData) { var xhr = new XMLHttpRequest(); xhr.open('GET', './ins.json?t=' + +new Date(), true); xhr.onload = function() { if (this.status >= 200 && this.status < 300) { var res = JSON.parse(this.response); searchData = res; success(searchData); } else { console.error(this.statusText); } }; xhr.onerror = function() { console.error(this.statusText); }; xhr.send(); } else { success(searchData); } } var Ins = { init: function init() { loadData(function(data) { render(data); }); } }; Ins.init(); // export default impush; /***/ }, /* 1 */ /***/ function(module, exports, __webpack_require__) { /* WEBPACK VAR INJECTION */ (function(global) { 'use strict'; var inViewport = __webpack_require__(3); var lazyAttrs = ['data-src']; global.lzld = lazyload(); // Provide libs using getAttribute early to get the good src // and not the fake data-src replaceGetAttribute('Image'); replaceGetAttribute('IFrame'); function registerLazyAttr(attr) { if (indexOf.call(lazyAttrs, attr) === -1) { lazyAttrs.push(attr); } } function lazyload(opts) { opts = merge({ 'offset': 333, 'src': 'data-src', 'container': false }, opts || {}); if (typeof opts.src === 'string') { registerLazyAttr(opts.src); } var elts = []; function show(elt) { var src = findRealSrc(elt); if (src) { elt.src = src; } elt.setAttribute('data-lzled', true); elts[indexOf.call(elts, elt)] = null; } function findRealSrc(elt) { if (typeof opts.src === 'function') { return opts.src(elt); } return elt.getAttribute(opts.src); } function register(elt) { elt.onload = null; elt.removeAttribute('onload'); elt.onerror = null; elt.removeAttribute('onerror'); if (indexOf.call(elts, elt) === -1) { inViewport(elt, opts, show); } } return register; } function replaceGetAttribute(elementName) { var fullname = 'HTML' + elementName + 'Element'; if (fullname in global === false) { return; } var original = global[fullname].prototype.getAttribute; global[fullname].prototype.getAttribute = function(name) { if (name === 'src') { var realSrc; for (var i = 0, max = lazyAttrs.length; i < max; i++) { realSrc = original.call(this, lazyAttrs[i]); if (realSrc) { break; } } return realSrc || original.call(this, name); } // our own lazyloader will go through theses lines // because we use getAttribute(opts.src) return original.call(this, name); }; } function merge(defaults, opts) { for (var name in defaults) { if (opts[name] === undefined) { opts[name] = defaults[name]; } } return opts; } // http://webreflection.blogspot.fr/2011/06/partial-polyfills.html function indexOf(value) { for (var i = this.length; i-- && this[i] !== value;) {} return i; } module.exports = lazyload; // export default impush; /* WEBPACK VAR INJECTION */ }.call(exports, (function() { return this; }()))) /***/ }, /* 2 */ /***/ function(module, exports) { 'use strict'; var initPhotoSwipeFromDOM = function initPhotoSwipeFromDOM(gallerySelector) { // parse slide data (url, title, size ...) from DOM elements // (children of gallerySelector) var parseThumbnailElements = function parseThumbnailElements(el) { el = el.parentNode.parentNode; var thumbElements = el.getElementsByClassName('thumb'), numNodes = thumbElements.length, items = [], figureEl, linkEl, size, type, // video or not target, item; for (var i = 0; i < numNodes; i++) { figureEl = thumbElements[i]; // // include only element nodes if (figureEl.nodeType !== 1) { continue; } linkEl = figureEl.children[0]; // size = linkEl.getAttribute('data-size').split('x'); type = linkEl.getAttribute('data-type'); target = linkEl.getAttribute('data-target'); // create slide object item = { src: linkEl.getAttribute('href'), w: parseInt(size[0], 10), h: parseInt(size[1], 10) }; if (figureEl.children.length > 1) { item.title = figureEl.children[1].innerHTML; } if (linkEl.children.length > 0) { item.msrc = linkEl.children[0].getAttribute('src'); item.type = type; item.target = target; item.html = ''; if (type === 'video') { //item.src = null; } } item.el = figureEl; // save link to element for getThumbBoundsFn items.push(item); } return items; }; // find nearest parent element var closest = function closest(el, fn) { return el && (fn(el) ? el : closest(el.parentNode, fn)); }; // triggers when user clicks on thumbnail var onThumbnailsClick = function onThumbnailsClick(e) { e = e || window.event; e.preventDefault ? e.preventDefault() : e.returnValue = false; var eTarget = e.target || e.srcElement; // find root element of slide var clickedListItem = closest(eTarget, function(el) { return el.tagName && el.tagName.toUpperCase() === 'FIGURE'; }); if (!clickedListItem) { return; } // find index of clicked item by looping through all child nodes // alternatively, you may define index via data- attribute var clickedGallery = clickedListItem.parentNode, // childNodes = clickedListItem.parentNode.childNodes, // numChildNodes = childNodes.length, childNodes = document.getElementsByClassName('thumb'), numChildNodes = childNodes.length, nodeIndex = 0, index; for (var i = 0; i < numChildNodes; i++) { if (childNodes[i].nodeType !== 1) { continue; } if (childNodes[i] === clickedListItem) { index = nodeIndex; break; } nodeIndex++; } if (index >= 0) { // open PhotoSwipe if valid index found openPhotoSwipe(index, clickedGallery); } return false; }; // parse picture index and gallery index from URL (#&pid=1&gid=2) var photoswipeParseHash = function photoswipeParseHash() { var hash = window.location.hash.substring(1), params = {}; if (hash.length < 5) { return params; } var vars = hash.split('&'); for (var i = 0; i < vars.length; i++) { if (!vars[i]) { continue; } var pair = vars[i].split('='); if (pair.length < 2) { continue; } params[pair[0]] = pair[1]; } if (params.gid) { params.gid = parseInt(params.gid, 10); } return params; }; var openPhotoSwipe = function openPhotoSwipe(index, galleryElement, disableAnimation, fromURL) { var pswpElement = document.querySelectorAll('.pswp')[0], gallery, options, items; items = parseThumbnailElements(galleryElement); // define options (if needed) options = { // define gallery index (for URL) galleryUID: galleryElement.getAttribute('data-pswp-uid'), getThumbBoundsFn: function getThumbBoundsFn(index) { // See Options -> getThumbBoundsFn section of documentation for more info var thumbnail = items[index].el.getElementsByTagName('img')[0], // find thumbnail pageYScroll = window.pageYOffset || document.documentElement.scrollTop, rect = thumbnail.getBoundingClientRect(); return { x: rect.left, y: rect.top + pageYScroll, w: rect.width }; } }; // PhotoSwipe opened from URL if (fromURL) { if (options.galleryPIDs) { // parse real index when custom PIDs are used // http://photoswipe.com/documentation/faq.html#custom-pid-in-url for (var j = 0; j < items.length; j++) { if (items[j].pid == index) { options.index = j; break; } } } else { // in URL indexes start from 1 options.index = parseInt(index, 10) - 1; } } else { options.index = parseInt(index, 10); } // exit if index not found if (isNaN(options.index)) { return; } if (disableAnimation) { options.showAnimationDuration = 0; } // Pass data to PhotoSwipe and initialize it gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options); gallery.init(); var $tempVideo; var stopVideoHandle = function stopVideoHandle() { if ($tempVideo) { $tempVideo.remove(); $tempVideo = null; } }; var changeHandle = function changeHandle() { var item = gallery.currItem; stopVideoHandle(); if (item.type === 'video') { var $ctn = item.container; var style = $ctn.getElementsByClassName('pswp__img')[0].style; var $video = document.createElement('video'); $video.setAttribute('autoplay', 'autoplay'); $video.setAttribute('controls', 'controls'); $video.setAttribute('src', item.target); $video.style.width = style.width; $video.style.height = style.height; $video.style.position = 'absolute'; $video.style.zIndex = 2; $tempVideo = $video; $ctn.appendChild($video); } }; gallery.listen('initialZoomIn', changeHandle); gallery.listen('afterChange', changeHandle); gallery.listen('initialZoomOut', stopVideoHandle); }; // loop through all gallery elements and bind events var galleryElements = document.querySelectorAll(gallerySelector); for (var i = 0, l = galleryElements.length; i < l; i++) { galleryElements[i].setAttribute('data-pswp-uid', i + 1); galleryElements[i].onclick = onThumbnailsClick; } // Parse URL and open gallery if it contains #&pid=3&gid=1 var hashData = photoswipeParseHash(); if (hashData.pid && hashData.gid) { openPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true); } }; var Viewer = function() { function init() { initPhotoSwipeFromDOM('.photos'); } return { init: init }; }(); module.exports = Viewer; /***/ }, /* 3 */ /***/ function(module, exports) { /* WEBPACK VAR INJECTION */ (function(global) { module.exports = inViewport; var instances = []; var supportsMutationObserver = typeof global.MutationObserver === 'function'; function inViewport(elt, params, cb) { var opts = { container: global.document.body, offset: 0 }; if (params === undefined || typeof params === 'function') { cb = params; params = {}; } var container = opts.container = params.container || opts.container; var offset = opts.offset = params.offset || opts.offset; for (var i = 0; i < instances.length; i++) { if (instances[i].container === container) { return instances[i].isInViewport(elt, offset, cb); } } return instances[ instances.push(createInViewport(container)) - 1 ].isInViewport(elt, offset, cb); } function addEvent(el, type, fn) { if (el.attachEvent) { el.attachEvent('on' + type, fn); } else { el.addEventListener(type, fn, false); } } function debounce(func, wait, immediate) { var timeout; return function() { var context = this, args = arguments; var callNow = immediate && !timeout; clearTimeout(timeout); timeout = setTimeout(later, wait); if (callNow) func.apply(context, args); function later() { timeout = null; if (!immediate) func.apply(context, args); } }; } // https://github.com/jquery/sizzle/blob/3136f48b90e3edc84cbaaa6f6f7734ef03775a07/sizzle.js#L708 var contains = function() { if (!global.document) { return true; } return global.document.documentElement.compareDocumentPosition ? function(a, b) { return !!(a.compareDocumentPosition(b) & 16); } : global.document.documentElement.contains ? function(a, b) { return a !== b && (a.contains ? a.contains(b) : false); } : function(a, b) { while (b = b.parentNode) { if (b === a) { return true; } } return false; }; } function createInViewport(container) { var watches = createWatches(); var scrollContainer = container === global.document.body ? global : container; var debouncedCheck = debounce(watches.checkAll(watchInViewport), 15); addEvent(scrollContainer, 'scroll', debouncedCheck); if (scrollContainer === global) { addEvent(global, 'resize', debouncedCheck); } if (supportsMutationObserver) { observeDOM(watches, container, debouncedCheck); } // failsafe check, every 200ms we check for visible images // usecase: a hidden parent containing eleements // when the parent becomes visible, we have no event that the children // became visible setInterval(debouncedCheck, 150); function isInViewport(elt, offset, cb) { if (!cb) { return isVisible(elt, offset); } var remote = createRemote(elt, offset, cb); remote.watch(); return remote; } function createRemote(elt, offset, cb) { function watch() { watches.add(elt, offset, cb); } function dispose() { watches.remove(elt); } return { watch: watch, dispose: dispose }; } function watchInViewport(elt, offset, cb) { if (isVisible(elt, offset)) { watches.remove(elt); cb(elt); } } function isVisible(elt, offset) { if (!contains(global.document.documentElement, elt) || !contains(global.document.documentElement, container)) { return false; } // Check if the element is visible // https://github.com/jquery/jquery/blob/740e190223d19a114d5373758127285d14d6b71e/src/css/hiddenVisibleSelectors.js if (!elt.offsetWidth || !elt.offsetHeight) { return false; } var eltRect = elt.getBoundingClientRect(); var viewport = {}; if (container === global.document.body) { viewport = { top: -offset, left: -offset, right: global.document.documentElement.clientWidth + offset, bottom: global.document.documentElement.clientHeight + offset }; } else { var containerRect = container.getBoundingClientRect(); viewport = { top: containerRect.top - offset, left: containerRect.left - offset, right: containerRect.right + offset, bottom: containerRect.bottom + offset }; } // The element must overlap with the visible part of the viewport var visible = ( (eltRect.right > viewport.left) && (eltRect.left < viewport.right) && (eltRect.bottom > viewport.top) && (eltRect.top < viewport.bottom) ); return visible; } return { container: container, isInViewport: isInViewport }; } function createWatches() { var watches = []; function add(elt, offset, cb) { if (!isWatched(elt)) { watches.push([elt, offset, cb]); } } function remove(elt) { var pos = indexOf(elt); if (pos !== -1) { watches.splice(pos, 1); } } function indexOf(elt) { for (var i = watches.length - 1; i >= 0; i--) { if (watches[i][0] === elt) { return i; } } return -1; } function isWatched(elt) { return indexOf(elt) !== -1; } function checkAll(cb) { return function() { for (var i = watches.length - 1; i >= 0; i--) { cb.apply(this, watches[i]); } }; } return { add: add, remove: remove, isWatched: isWatched, checkAll: checkAll }; } function observeDOM(watches, container, cb) { var observer = new MutationObserver(watch); var filter = Array.prototype.filter; var concat = Array.prototype.concat; observer.observe(container, { childList: true, subtree: true, // changes like style/width/height/display will be catched attributes: true }); function watch(mutations) { // some new DOM nodes where previously watched // we should check their positions if (mutations.some(knownNodes) === true) { setTimeout(cb, 0); } } function knownNodes(mutation) { var nodes = concat.call([], Array.prototype.slice.call(mutation.addedNodes), mutation.target ); return filter.call(nodes, watches.isWatched).length > 0; } } /* WEBPACK VAR INJECTION */ }.call(exports, (function() { return this; }()))) /***/ } /******/ ]);"}],"posts":[{"title":"","slug":"珍惜生活/index","date":"2018-07-12T06:20:47.764Z","updated":"2018-07-12T05:14:45.000Z","comments":true,"path":"2018/07/12/珍惜生活/index/","link":"","permalink":"https://lhldream.top/2018/07/12/珍惜生活/index/","excerpt":"","text":"var NexT = window.NexT || {}; var CONFIG = { root: '/', scheme: 'Gemini', version: '5.1.4', sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"b2t\":true,\"scrollpercent\":true,\"onmobile\":false}, fancybox: true, tabs: true, motion: {\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}}, duoshuo: { userId: '0', author: 'Author' }, algolia: { applicationID: '', apiKey: '', indexName: '', hits: {\"per_page\":10}, labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"} } }; 珍惜生活 | 睡醒的兔子 睡醒的兔子 当我们认为自己对这个世界已经相当重要的时候，其实这个世界才刚刚准备原谅我们的幼稚。 Home Categories Archives Tags About photos Search 珍惜生活 Posted on 2018-07-11 | In 人生 决定一个人成就的，不是天分，也不是运气，而是坚持和付出。是不停地做，重复的做，用心去做。当你真的努力了，付出了，你会发现自己潜力无限！记得每天鼓励自己，越勤奋，越幸运，越感恩，越幸福！早安 人生中出现的一切，都无法拥有，只能经历。深知这一点的人，就会懂得：无所谓失去，而只是经过而已；亦无所谓失败，而只是经验而已。用一颗浏览的心，去看待人生，一切的得与失、隐与显，都是风景与心情。 人生需要看透，但不能看破。事情看透，你就明白该如何进行；人情看透，你就明白该如何相处；事情看破，你就不想做事了；人情看破，你就不想做人了。所以，只要用点心，其余只是接受。要做到不去在意他人的言语很困难吧？嘴巴是别人的，人生是自己的。 或许，我们可以做的，只是让自己勇敢的活着。有人说，只有自己成为公主，才能吸引王子。而我想说，我们要努力让自己比公主还要优秀，至于是否可以吸引王子，就不是我们考虑的范围了。或许随遇而安，顺其自然，并不能带给我们想要的生活，但是，又有什么关系呢。快乐的活着，就很好。 人和人相遇，靠的是缘分；人和人相处，靠的是诚意。知遇着，便是幸福；相惜着，便是温暖。这世间，没有谁对不起谁，只有谁不懂得珍惜谁。相遇最美，今生若能遇见，就是难得的缘份和幸福。无论亲情、友情还是爱情，自然而然留在身边的，才是最真的，最长久的。遇见，只是一个开始；珍惜，才能相伴一生。 有人说，听到了候鸟的叫声，下一个期待中的季节就不远了。我这只候鸟，在青春的纬度里，继续着我青春的梦。生命不在于活得长与短，而在于顿悟的早与晚。 人生就像一本深刻丰厚的书，汇聚着生命的整个过程，每一页都记载着深邃博大的生活内容。人生的酸甜苦辣、喜怒哀乐全部藴含在字里行间。人生拥有太多的回忆，无论经历如何坎坷，滋味如何痛苦，唯一不变的还是那颗向往美好的心。 有时候不是不懂，只是不想懂；有时候不是不知道，只是不想说出来；有时候不是不明白，而是明白了也无能为力，于是就保持了沉默。有些话，适合藏在心里；有些痛苦适合无声无息的忘记；有些回忆，只适合偶尔拿出来回味。很多事，当经历过，自己知道就好。 人生千灯万盏，不如心灯一盏。人活得累，是因为能左右你心情的东西太多。天气的变化，人情的冷暖，不同的风景都会影响你的心情。而他们都是你无法左右的。看淡了，天无非阴晴，人不过聚散，地只是高低。不悲不喜，便是晴天。 任何时候都要记得，给人生留点余地，得到时不自喜，失去时不抑郁。留一点好处让别人占，留一点道路让别人走，留一点时间让自己思考。 欢迎您扫一扫上面的微信公众号，订阅我的博客！ # 七言 逗比老爸的逗比日常 晚安,好梦 Candy 不定时分享娱乐内容 14 posts 2 categories 3 tags RSS 0% &copy; 2018 Candy Powered by Hexo | Theme &mdash; NexT.Gemini v5.1.4 本站总访问量 次 | 有人看过我的博客啦 if (Object.prototype.toString.call(window.Promise) !== '[object Function]') { window.Promise = null; } // Popup Window; var isfetched = false; var isXml = true; // Search DB path; var search_path = \"search.xml\"; if (search_path.length === 0) { search_path = \"search.xml\"; } else if (/json$/i.test(search_path)) { isXml = false; } var path = \"/\" + search_path; // monitor main search box; var onPopupClose = function (e) { $('.popup').hide(); $('#local-search-input').val(''); $('.search-result-list').remove(); $('#no-result').remove(); $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); } function proceedsearch() { $(\"body\") .append('') .css('overflow', 'hidden'); $('.search-popup-overlay').click(onPopupClose); $('.popup').toggle(); var $localSearchInput = $('#local-search-input'); $localSearchInput.attr(\"autocapitalize\", \"none\"); $localSearchInput.attr(\"autocorrect\", \"off\"); $localSearchInput.focus(); } // search function; var searchFunc = function(path, search_id, content_id) { 'use strict'; // start loading animation $(\"body\") .append('' + '' + '' + '' + '') .css('overflow', 'hidden'); $(\"#search-loading-icon\").css('margin', '20% auto 0 auto').css('text-align', 'center'); $.ajax({ url: path, dataType: isXml ? \"xml\" : \"json\", async: true, success: function(res) { // get the contents from search data isfetched = true; $('.popup').detach().appendTo('.header-inner'); var datas = isXml ? $(\"entry\", res).map(function() { return { title: $(\"title\", this).text(), content: $(\"content\",this).text(), url: $(\"url\" , this).text() }; }).get() : res; var input = document.getElementById(search_id); var resultContent = document.getElementById(content_id); var inputEventFunction = function() { var searchText = input.value.trim().toLowerCase(); var keywords = searchText.split(/[\\s\\-]+/); if (keywords.length > 1) { keywords.push(searchText); } var resultItems = []; if (searchText.length > 0) { // perform local searching datas.forEach(function(data) { var isMatch = false; var hitCount = 0; var searchTextCount = 0; var title = data.title.trim(); var titleInLowerCase = title.toLowerCase(); var content = data.content.trim().replace(/]+>/g,\"\"); var contentInLowerCase = content.toLowerCase(); var articleUrl = decodeURIComponent(data.url); var indexOfTitle = []; var indexOfContent = []; // only match articles with not empty titles if(title != '') { keywords.forEach(function(keyword) { function getIndexByWord(word, text, caseSensitive) { var wordLen = word.length; if (wordLen === 0) { return []; } var startPosition = 0, position = [], index = []; if (!caseSensitive) { text = text.toLowerCase(); word = word.toLowerCase(); } while ((position = text.indexOf(word, startPosition)) > -1) { index.push({position: position, word: word}); startPosition = position + wordLen; } return index; } indexOfTitle = indexOfTitle.concat(getIndexByWord(keyword, titleInLowerCase, false)); indexOfContent = indexOfContent.concat(getIndexByWord(keyword, contentInLowerCase, false)); }); if (indexOfTitle.length > 0 || indexOfContent.length > 0) { isMatch = true; hitCount = indexOfTitle.length + indexOfContent.length; } } // show search results if (isMatch) { // sort index by position of keyword [indexOfTitle, indexOfContent].forEach(function (index) { index.sort(function (itemLeft, itemRight) { if (itemRight.position !== itemLeft.position) { return itemRight.position - itemLeft.position; } else { return itemLeft.word.length - itemRight.word.length; } }); }); // merge hits into slices function mergeIntoSlice(text, start, end, index) { var item = index[index.length - 1]; var position = item.position; var word = item.word; var hits = []; var searchTextCountInSlice = 0; while (position + word.length position) { index.pop(); } else { break; } } } searchTextCount += searchTextCountInSlice; return { hits: hits, start: start, end: end, searchTextCount: searchTextCountInSlice }; } var slicesOfTitle = []; if (indexOfTitle.length != 0) { slicesOfTitle.push(mergeIntoSlice(title, 0, title.length, indexOfTitle)); } var slicesOfContent = []; while (indexOfContent.length != 0) { var item = indexOfContent[indexOfContent.length - 1]; var position = item.position; var word = item.word; // cut out 100 characters var start = position - 20; var end = position + 80; if(start < 0){ start = 0; } if (end < position + word.length) { end = position + word.length; } if(end > content.length){ end = content.length; } slicesOfContent.push(mergeIntoSlice(content, start, end, indexOfContent)); } // sort slices in content by search text's count and hits' count slicesOfContent.sort(function (sliceLeft, sliceRight) { if (sliceLeft.searchTextCount !== sliceRight.searchTextCount) { return sliceRight.searchTextCount - sliceLeft.searchTextCount; } else if (sliceLeft.hits.length !== sliceRight.hits.length) { return sliceRight.hits.length - sliceLeft.hits.length; } else { return sliceLeft.start - sliceRight.start; } }); // select top N slices in content var upperBound = parseInt('1'); if (upperBound >= 0) { slicesOfContent = slicesOfContent.slice(0, upperBound); } // highlight title and content function highlightKeyword(text, slice) { var result = ''; var prevEnd = slice.start; slice.hits.forEach(function (hit) { result += text.substring(prevEnd, hit.position); var end = hit.position + hit.length; result += '' + text.substring(hit.position, end) + ''; prevEnd = end; }); result += text.substring(prevEnd, slice.end); return result; } var resultItem = ''; if (slicesOfTitle.length != 0) { resultItem += \"\" + highlightKeyword(title, slicesOfTitle[0]) + \"\"; } else { resultItem += \"\" + title + \"\"; } slicesOfContent.forEach(function (slice) { resultItem += \"\" + \"\" + highlightKeyword(content, slice) + \"...\" + \"\"; }); resultItem += \"\"; resultItems.push({ item: resultItem, searchTextCount: searchTextCount, hitCount: hitCount, id: resultItems.length }); } }) }; if (keywords.length === 1 && keywords[0] === \"\") { resultContent.innerHTML = '' } else if (resultItems.length === 0) { resultContent.innerHTML = '' } else { resultItems.sort(function (resultLeft, resultRight) { if (resultLeft.searchTextCount !== resultRight.searchTextCount) { return resultRight.searchTextCount - resultLeft.searchTextCount; } else if (resultLeft.hitCount !== resultRight.hitCount) { return resultRight.hitCount - resultLeft.hitCount; } else { return resultRight.id - resultLeft.id; } }); var searchResultList = ''; resultItems.forEach(function (result) { searchResultList += result.item; }) searchResultList += \"\"; resultContent.innerHTML = searchResultList; } } if ('auto' === 'auto') { input.addEventListener('input', inputEventFunction); } else { $('.search-icon').click(inputEventFunction); input.addEventListener('keypress', function (event) { if (event.keyCode === 13) { inputEventFunction(); } }); } // remove loading animation $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); proceedsearch(); } }); } // handle and trigger popup window; $('.popup-trigger').click(function(e) { e.stopPropagation(); if (isfetched === false) { searchFunc(path, 'local-search-input', 'local-search-result'); } else { proceedsearch(); }; }); $('.popup-btn-close').click(onPopupClose); $('.popup').click(function(e){ e.stopPropagation(); }); $(document).on('keyup', function (event) { var shouldDismissSearchPopup = event.which === 27 && $('.search-popup').is(':visible'); if (shouldDismissSearchPopup) { onPopupClose(); } });","categories":[],"tags":[]},{"title":"","slug":"一切事都赶快做,别去等/index","date":"2018-07-12T06:20:47.365Z","updated":"2018-07-12T05:14:45.000Z","comments":true,"path":"2018/07/12/一切事都赶快做,别去等/index/","link":"","permalink":"https://lhldream.top/2018/07/12/一切事都赶快做,别去等/index/","excerpt":"","text":"var NexT = window.NexT || {}; var CONFIG = { root: '/', scheme: 'Gemini', version: '5.1.4', sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"b2t\":true,\"scrollpercent\":true,\"onmobile\":false}, fancybox: true, tabs: true, motion: {\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}}, duoshuo: { userId: '0', author: 'Author' }, algolia: { applicationID: '', apiKey: '', indexName: '', hits: {\"per_page\":10}, labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"} } }; 一切事都赶快做,别去等 | 睡醒的兔子 睡醒的兔子 当我们认为自己对这个世界已经相当重要的时候，其实这个世界才刚刚准备原谅我们的幼稚。 Home Categories Archives Tags About photos Search 一切事都赶快做,别去等 Posted on 2018-07-11 | In 人生 烟波流转，流云翩跹，是你的微笑在我心海流连；青山如黛，绿水盈盈，是你的执著让我无悔等待；弦月冉冉，繁星点点，是你的温暖让我驻足今生。只因相识太美所以牵念一生，只为真心难觅所以无法忘怀。就让我携你手趟过千年的风霜雪雨，就让我陪你到地老天荒，日落星沉；执笔为你眷写沧海桑田，岁月轮回。 静好的时光里，总是有一个人，渡你一生的回忆。有人说，一个人最好记性不要太好，因为回忆越多，幸福感越少。我期许，有爱的地方，便有美丽，便有温柔的阳光，空气和水。而在每个清晨，我第一眼的凝望的，就是窗前那抹最暖和的微光，那是我最美的祝福。 因为有阳光，我的世界，风轻云淡，柔软纯白。时光静走，我终于明白，岁月静好，原来流年里的那些寂寞，那么满。谁的感伤也摧毁不了青春的高墙，有些人儿注定别离，相遇只是幻想，我们都不过是在对流年撒谎，因为寂寞很孤单，爱很简单，生活一直很平淡。而那些苍白的岁月里，那些不具名的寂寞，都是虚无荒诞的谎言。 因为有你，所以不必寂寞，是的，那些寂寞，不过是卑微的情愫，因为最后，有人会陪我们一起看细水长流，并用用细碎的步子与我们一起奔跑，一直到天涯海角。那时候，我们会发现怀念不是唯一的寄托，期待不是唯一的承诺，哀伤是奢望的情感，但快乐却不是。只要心有所依，依旧岁月无恙。 我相信，终会有一个人，会明白我内心的，那所有纯白与柔软，明白我的寂寞与一切不具名的情感，心疼我的心疼，并且会陪我一起看花开花谢，云起云归。如果可以，与时光对舞，我愿在这样温暖的时光里，任心若云归，年华静美，然后，慢慢老去。静静，听见花开的声音，听见，幸福的声音。衣破尘埃，破颜一笑，是清欢，亦是美好。 薄凉的声色里，也曾与时光邂逅，与寂寞有染，抹不去画地为牢的孤单，在流年的怀抱里，在空城里，闭上眼，静静沉睡，记忆里，那些生如夏花的绚烂焚尽，如秋叶静美而凋零。这世上，总有一些东西，不死，不老。那如诗如画的流年总会成就出一番隽永的味道。 纵使人会老，但最诚挚的爱不会老去，我时常在想，如果变老，我们是不是，还会有当初，那最美的年华的美好。是不是，还能坦然的微笑。张爱玲说：“喜欢一个人，会卑微到尘埃里，然后开出花来。”生命中，总有些人，安然而来，静静守候，不离不弃；也有些人，浓烈如酒，疯狂似醉，却是醒来无处觅，来去都如风，梦过无痕。红尘芸芸，总会有人愿意，为我们卑微到尘埃里，那是我们一生的眷属。 你若一直在，我便一直爱，不乱于心，不困于情，不畏将来，不念过往，如此，安好。我知道，时光会记得，那些始终如一，那些年华的美好，某些东西，深藏在心中，永远不会老去。你是我不停的追逐，你是我不舍的想念。花开，叶落。站在未来等你，站在过去思念。一曲筝音悠扬，在绵绵的月下流转；一缕清浅幽香，在轻盈的风里飘荡。就让我，倾此一生，沫你欢颜 时光悠悠然飞逝，天际的月儿圆了又缺，也不知过了多少岁月。我就这样飘摇在这座城里，忘记了时间，也忘记了走出去。渐渐的，心里也就有了那么一座城，孤独堆砌起城墙，清冷构筑成屋舍。 时光流逝，风卷着落叶在不经意间滑落，摇曳着深秋的寂寥。一场秋雨过后，北方的秋天以有了些许的寒意，万物都删繁就简起来，装点着着这一季的冷清。季节的转换间，总会演绎着繁华与落寂，而我们，就在这流年的急景中，看着过往匆匆，细数流年的悲喜，以一颗安然的心，沉淀着红尘的浮华。 欢迎您扫一扫上面的微信公众号，订阅我的博客！ # 七言 人生若只如初见 时光旅行者 Candy 不定时分享娱乐内容 14 posts 2 categories 3 tags RSS 0% &copy; 2018 Candy Powered by Hexo | Theme &mdash; NexT.Gemini v5.1.4 本站总访问量 次 | 有人看过我的博客啦 if (Object.prototype.toString.call(window.Promise) !== '[object Function]') { window.Promise = null; } // Popup Window; var isfetched = false; var isXml = true; // Search DB path; var search_path = \"search.xml\"; if (search_path.length === 0) { search_path = \"search.xml\"; } else if (/json$/i.test(search_path)) { isXml = false; } var path = \"/\" + search_path; // monitor main search box; var onPopupClose = function (e) { $('.popup').hide(); $('#local-search-input').val(''); $('.search-result-list').remove(); $('#no-result').remove(); $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); } function proceedsearch() { $(\"body\") .append('') .css('overflow', 'hidden'); $('.search-popup-overlay').click(onPopupClose); $('.popup').toggle(); var $localSearchInput = $('#local-search-input'); $localSearchInput.attr(\"autocapitalize\", \"none\"); $localSearchInput.attr(\"autocorrect\", \"off\"); $localSearchInput.focus(); } // search function; var searchFunc = function(path, search_id, content_id) { 'use strict'; // start loading animation $(\"body\") .append('' + '' + '' + '' + '') .css('overflow', 'hidden'); $(\"#search-loading-icon\").css('margin', '20% auto 0 auto').css('text-align', 'center'); $.ajax({ url: path, dataType: isXml ? \"xml\" : \"json\", async: true, success: function(res) { // get the contents from search data isfetched = true; $('.popup').detach().appendTo('.header-inner'); var datas = isXml ? $(\"entry\", res).map(function() { return { title: $(\"title\", this).text(), content: $(\"content\",this).text(), url: $(\"url\" , this).text() }; }).get() : res; var input = document.getElementById(search_id); var resultContent = document.getElementById(content_id); var inputEventFunction = function() { var searchText = input.value.trim().toLowerCase(); var keywords = searchText.split(/[\\s\\-]+/); if (keywords.length > 1) { keywords.push(searchText); } var resultItems = []; if (searchText.length > 0) { // perform local searching datas.forEach(function(data) { var isMatch = false; var hitCount = 0; var searchTextCount = 0; var title = data.title.trim(); var titleInLowerCase = title.toLowerCase(); var content = data.content.trim().replace(/]+>/g,\"\"); var contentInLowerCase = content.toLowerCase(); var articleUrl = decodeURIComponent(data.url); var indexOfTitle = []; var indexOfContent = []; // only match articles with not empty titles if(title != '') { keywords.forEach(function(keyword) { function getIndexByWord(word, text, caseSensitive) { var wordLen = word.length; if (wordLen === 0) { return []; } var startPosition = 0, position = [], index = []; if (!caseSensitive) { text = text.toLowerCase(); word = word.toLowerCase(); } while ((position = text.indexOf(word, startPosition)) > -1) { index.push({position: position, word: word}); startPosition = position + wordLen; } return index; } indexOfTitle = indexOfTitle.concat(getIndexByWord(keyword, titleInLowerCase, false)); indexOfContent = indexOfContent.concat(getIndexByWord(keyword, contentInLowerCase, false)); }); if (indexOfTitle.length > 0 || indexOfContent.length > 0) { isMatch = true; hitCount = indexOfTitle.length + indexOfContent.length; } } // show search results if (isMatch) { // sort index by position of keyword [indexOfTitle, indexOfContent].forEach(function (index) { index.sort(function (itemLeft, itemRight) { if (itemRight.position !== itemLeft.position) { return itemRight.position - itemLeft.position; } else { return itemLeft.word.length - itemRight.word.length; } }); }); // merge hits into slices function mergeIntoSlice(text, start, end, index) { var item = index[index.length - 1]; var position = item.position; var word = item.word; var hits = []; var searchTextCountInSlice = 0; while (position + word.length position) { index.pop(); } else { break; } } } searchTextCount += searchTextCountInSlice; return { hits: hits, start: start, end: end, searchTextCount: searchTextCountInSlice }; } var slicesOfTitle = []; if (indexOfTitle.length != 0) { slicesOfTitle.push(mergeIntoSlice(title, 0, title.length, indexOfTitle)); } var slicesOfContent = []; while (indexOfContent.length != 0) { var item = indexOfContent[indexOfContent.length - 1]; var position = item.position; var word = item.word; // cut out 100 characters var start = position - 20; var end = position + 80; if(start < 0){ start = 0; } if (end < position + word.length) { end = position + word.length; } if(end > content.length){ end = content.length; } slicesOfContent.push(mergeIntoSlice(content, start, end, indexOfContent)); } // sort slices in content by search text's count and hits' count slicesOfContent.sort(function (sliceLeft, sliceRight) { if (sliceLeft.searchTextCount !== sliceRight.searchTextCount) { return sliceRight.searchTextCount - sliceLeft.searchTextCount; } else if (sliceLeft.hits.length !== sliceRight.hits.length) { return sliceRight.hits.length - sliceLeft.hits.length; } else { return sliceLeft.start - sliceRight.start; } }); // select top N slices in content var upperBound = parseInt('1'); if (upperBound >= 0) { slicesOfContent = slicesOfContent.slice(0, upperBound); } // highlight title and content function highlightKeyword(text, slice) { var result = ''; var prevEnd = slice.start; slice.hits.forEach(function (hit) { result += text.substring(prevEnd, hit.position); var end = hit.position + hit.length; result += '' + text.substring(hit.position, end) + ''; prevEnd = end; }); result += text.substring(prevEnd, slice.end); return result; } var resultItem = ''; if (slicesOfTitle.length != 0) { resultItem += \"\" + highlightKeyword(title, slicesOfTitle[0]) + \"\"; } else { resultItem += \"\" + title + \"\"; } slicesOfContent.forEach(function (slice) { resultItem += \"\" + \"\" + highlightKeyword(content, slice) + \"...\" + \"\"; }); resultItem += \"\"; resultItems.push({ item: resultItem, searchTextCount: searchTextCount, hitCount: hitCount, id: resultItems.length }); } }) }; if (keywords.length === 1 && keywords[0] === \"\") { resultContent.innerHTML = '' } else if (resultItems.length === 0) { resultContent.innerHTML = '' } else { resultItems.sort(function (resultLeft, resultRight) { if (resultLeft.searchTextCount !== resultRight.searchTextCount) { return resultRight.searchTextCount - resultLeft.searchTextCount; } else if (resultLeft.hitCount !== resultRight.hitCount) { return resultRight.hitCount - resultLeft.hitCount; } else { return resultRight.id - resultLeft.id; } }); var searchResultList = ''; resultItems.forEach(function (result) { searchResultList += result.item; }) searchResultList += \"\"; resultContent.innerHTML = searchResultList; } } if ('auto' === 'auto') { input.addEventListener('input', inputEventFunction); } else { $('.search-icon').click(inputEventFunction); input.addEventListener('keypress', function (event) { if (event.keyCode === 13) { inputEventFunction(); } }); } // remove loading animation $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); proceedsearch(); } }); } // handle and trigger popup window; $('.popup-trigger').click(function(e) { e.stopPropagation(); if (isfetched === false) { searchFunc(path, 'local-search-input', 'local-search-result'); } else { proceedsearch(); }; }); $('.popup-btn-close').click(onPopupClose); $('.popup').click(function(e){ e.stopPropagation(); }); $(document).on('keyup', function (event) { var shouldDismissSearchPopup = event.which === 27 && $('.search-popup').is(':visible'); if (shouldDismissSearchPopup) { onPopupClose(); } });","categories":[],"tags":[]},{"title":"","slug":"唯有爱不可辜负/index","date":"2018-07-12T06:20:46.968Z","updated":"2018-07-12T05:14:45.000Z","comments":true,"path":"2018/07/12/唯有爱不可辜负/index/","link":"","permalink":"https://lhldream.top/2018/07/12/唯有爱不可辜负/index/","excerpt":"","text":"var NexT = window.NexT || {}; var CONFIG = { root: '/', scheme: 'Gemini', version: '5.1.4', sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"b2t\":true,\"scrollpercent\":true,\"onmobile\":false}, fancybox: true, tabs: true, motion: {\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}}, duoshuo: { userId: '0', author: 'Author' }, algolia: { applicationID: '', apiKey: '', indexName: '', hits: {\"per_page\":10}, labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"} } }; 唯有爱不可辜负 | 睡醒的兔子 睡醒的兔子 当我们认为自己对这个世界已经相当重要的时候，其实这个世界才刚刚准备原谅我们的幼稚。 Home Categories Archives Tags About photos Search 唯有爱不可辜负 Posted on 2018-07-11 | In 人生 爱一个人要用心，诚心相待，真心交流，恒心相守。在一起是一种缘分，不要轻易让喜欢你的人哭泣伤心，好好珍惜在一起的每一分钟，美好的回忆应该留给快乐和欢笑。 心动，是第一眼看见你时；心跳，因你的出现而加速；心情，随着你而喜怒哀乐。我怀念那些曾经，是因为那里有我最单纯的思念和最完整的心。 白头到老，你是我爱过，疼过，挣扎过，放弃过，却还义无反顾想爱的人。我们渴望的，是倾心呵护能够一生行走的爱情。 白头到老，你是我爱过，疼过，挣扎过，放弃过，却还义无反顾想爱的人。我们渴望的，是倾心呵护能够一生行走的爱情。 留住的叫幸福，流逝的叫遗憾：幸福的滋味是甜甜的，偶尔酸酸的；遗憾的感觉是苦苦的，偶尔辣辣的。“不合适”三字道，尽了多少男女之间的无可奈何。 有一种遇见，一眼凝眸，便是永恒；有一种心动，一生一次，只为一人；有一种相知，一声懂得，便是花开；有一种相守，默然相爱，寂然欢喜；有一种牵念，远在天涯，近在咫尺；有一种相思，一眼回眸，已然入骨；有一种情话，弱水三千只取一瓢；有一种约定，风雨同舟不离不弃；有一种誓言，时光尽头我在等你。 情不在拥有，用心珍惜，才能长久；爱，不在嘴边，挂念在心，方能相依。缘分，不论早晚，倾心，能相知；牵念，无论远近，倾情，才能唯一。爱，无声，只能用心默默聆听；情，无语，只能用心悄悄牵念。一种爱，是心的默契，一种情，是心的守望。 先爱的人先输，多爱的人多苦。世间最悲哀的事，莫过于两个人彼此倾心，却因为沉默而错过。一颗心属于一个人，爱情里什么是公平？爱的深，伤的深，在爱情里面是没有不公平。爱上不该爱的人，是永无天日的叹息，爱了不爱你的人，那么也就是眼泪决堤的开始。做一个简单的人，保持平常心，简单，快乐。 任何美丽而痛苦的回忆，都已成为昨日的乐章。寄情于那曾一度辉煌过的亲切记忆，辗转沉溺于早已虚幻如梦的往日悲欢，便不会看到威力的爱情芳草重生，即使日，月，星辰都从你身边溜走，至少你还拥有一片天空。 我爱你，没有什么目的，只是爱你。一辈子，就做一次自己。这一次，我想给你全世界；这一次，遍体鳞伤也没关系；这一次，用尽所有的勇敢；这一次，可以什么都不在乎。但只是这一次就够了。因为生命再也承受不起这么重的爱情。这一次，我愿意为你丢弃自尊，放下矜持，不管值不值得，不管爱得多卑微。 欢迎您扫一扫上面的微信公众号，订阅我的博客！ # 七言 情愿得一人心,白首不分离 人生悟语 Candy 不定时分享娱乐内容 14 posts 2 categories 3 tags RSS 0% &copy; 2018 Candy Powered by Hexo | Theme &mdash; NexT.Gemini v5.1.4 本站总访问量 次 | 有人看过我的博客啦 if (Object.prototype.toString.call(window.Promise) !== '[object Function]') { window.Promise = null; } // Popup Window; var isfetched = false; var isXml = true; // Search DB path; var search_path = \"search.xml\"; if (search_path.length === 0) { search_path = \"search.xml\"; } else if (/json$/i.test(search_path)) { isXml = false; } var path = \"/\" + search_path; // monitor main search box; var onPopupClose = function (e) { $('.popup').hide(); $('#local-search-input').val(''); $('.search-result-list').remove(); $('#no-result').remove(); $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); } function proceedsearch() { $(\"body\") .append('') .css('overflow', 'hidden'); $('.search-popup-overlay').click(onPopupClose); $('.popup').toggle(); var $localSearchInput = $('#local-search-input'); $localSearchInput.attr(\"autocapitalize\", \"none\"); $localSearchInput.attr(\"autocorrect\", \"off\"); $localSearchInput.focus(); } // search function; var searchFunc = function(path, search_id, content_id) { 'use strict'; // start loading animation $(\"body\") .append('' + '' + '' + '' + '') .css('overflow', 'hidden'); $(\"#search-loading-icon\").css('margin', '20% auto 0 auto').css('text-align', 'center'); $.ajax({ url: path, dataType: isXml ? \"xml\" : \"json\", async: true, success: function(res) { // get the contents from search data isfetched = true; $('.popup').detach().appendTo('.header-inner'); var datas = isXml ? $(\"entry\", res).map(function() { return { title: $(\"title\", this).text(), content: $(\"content\",this).text(), url: $(\"url\" , this).text() }; }).get() : res; var input = document.getElementById(search_id); var resultContent = document.getElementById(content_id); var inputEventFunction = function() { var searchText = input.value.trim().toLowerCase(); var keywords = searchText.split(/[\\s\\-]+/); if (keywords.length > 1) { keywords.push(searchText); } var resultItems = []; if (searchText.length > 0) { // perform local searching datas.forEach(function(data) { var isMatch = false; var hitCount = 0; var searchTextCount = 0; var title = data.title.trim(); var titleInLowerCase = title.toLowerCase(); var content = data.content.trim().replace(/]+>/g,\"\"); var contentInLowerCase = content.toLowerCase(); var articleUrl = decodeURIComponent(data.url); var indexOfTitle = []; var indexOfContent = []; // only match articles with not empty titles if(title != '') { keywords.forEach(function(keyword) { function getIndexByWord(word, text, caseSensitive) { var wordLen = word.length; if (wordLen === 0) { return []; } var startPosition = 0, position = [], index = []; if (!caseSensitive) { text = text.toLowerCase(); word = word.toLowerCase(); } while ((position = text.indexOf(word, startPosition)) > -1) { index.push({position: position, word: word}); startPosition = position + wordLen; } return index; } indexOfTitle = indexOfTitle.concat(getIndexByWord(keyword, titleInLowerCase, false)); indexOfContent = indexOfContent.concat(getIndexByWord(keyword, contentInLowerCase, false)); }); if (indexOfTitle.length > 0 || indexOfContent.length > 0) { isMatch = true; hitCount = indexOfTitle.length + indexOfContent.length; } } // show search results if (isMatch) { // sort index by position of keyword [indexOfTitle, indexOfContent].forEach(function (index) { index.sort(function (itemLeft, itemRight) { if (itemRight.position !== itemLeft.position) { return itemRight.position - itemLeft.position; } else { return itemLeft.word.length - itemRight.word.length; } }); }); // merge hits into slices function mergeIntoSlice(text, start, end, index) { var item = index[index.length - 1]; var position = item.position; var word = item.word; var hits = []; var searchTextCountInSlice = 0; while (position + word.length position) { index.pop(); } else { break; } } } searchTextCount += searchTextCountInSlice; return { hits: hits, start: start, end: end, searchTextCount: searchTextCountInSlice }; } var slicesOfTitle = []; if (indexOfTitle.length != 0) { slicesOfTitle.push(mergeIntoSlice(title, 0, title.length, indexOfTitle)); } var slicesOfContent = []; while (indexOfContent.length != 0) { var item = indexOfContent[indexOfContent.length - 1]; var position = item.position; var word = item.word; // cut out 100 characters var start = position - 20; var end = position + 80; if(start < 0){ start = 0; } if (end < position + word.length) { end = position + word.length; } if(end > content.length){ end = content.length; } slicesOfContent.push(mergeIntoSlice(content, start, end, indexOfContent)); } // sort slices in content by search text's count and hits' count slicesOfContent.sort(function (sliceLeft, sliceRight) { if (sliceLeft.searchTextCount !== sliceRight.searchTextCount) { return sliceRight.searchTextCount - sliceLeft.searchTextCount; } else if (sliceLeft.hits.length !== sliceRight.hits.length) { return sliceRight.hits.length - sliceLeft.hits.length; } else { return sliceLeft.start - sliceRight.start; } }); // select top N slices in content var upperBound = parseInt('1'); if (upperBound >= 0) { slicesOfContent = slicesOfContent.slice(0, upperBound); } // highlight title and content function highlightKeyword(text, slice) { var result = ''; var prevEnd = slice.start; slice.hits.forEach(function (hit) { result += text.substring(prevEnd, hit.position); var end = hit.position + hit.length; result += '' + text.substring(hit.position, end) + ''; prevEnd = end; }); result += text.substring(prevEnd, slice.end); return result; } var resultItem = ''; if (slicesOfTitle.length != 0) { resultItem += \"\" + highlightKeyword(title, slicesOfTitle[0]) + \"\"; } else { resultItem += \"\" + title + \"\"; } slicesOfContent.forEach(function (slice) { resultItem += \"\" + \"\" + highlightKeyword(content, slice) + \"...\" + \"\"; }); resultItem += \"\"; resultItems.push({ item: resultItem, searchTextCount: searchTextCount, hitCount: hitCount, id: resultItems.length }); } }) }; if (keywords.length === 1 && keywords[0] === \"\") { resultContent.innerHTML = '' } else if (resultItems.length === 0) { resultContent.innerHTML = '' } else { resultItems.sort(function (resultLeft, resultRight) { if (resultLeft.searchTextCount !== resultRight.searchTextCount) { return resultRight.searchTextCount - resultLeft.searchTextCount; } else if (resultLeft.hitCount !== resultRight.hitCount) { return resultRight.hitCount - resultLeft.hitCount; } else { return resultRight.id - resultLeft.id; } }); var searchResultList = ''; resultItems.forEach(function (result) { searchResultList += result.item; }) searchResultList += \"\"; resultContent.innerHTML = searchResultList; } } if ('auto' === 'auto') { input.addEventListener('input', inputEventFunction); } else { $('.search-icon').click(inputEventFunction); input.addEventListener('keypress', function (event) { if (event.keyCode === 13) { inputEventFunction(); } }); } // remove loading animation $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); proceedsearch(); } }); } // handle and trigger popup window; $('.popup-trigger').click(function(e) { e.stopPropagation(); if (isfetched === false) { searchFunc(path, 'local-search-input', 'local-search-result'); } else { proceedsearch(); }; }); $('.popup-btn-close').click(onPopupClose); $('.popup').click(function(e){ e.stopPropagation(); }); $(document).on('keyup', function (event) { var shouldDismissSearchPopup = event.which === 27 && $('.search-popup').is(':visible'); if (shouldDismissSearchPopup) { onPopupClose(); } });","categories":[],"tags":[]},{"title":"","slug":"晚安,好梦/index","date":"2018-07-12T06:20:46.576Z","updated":"2018-07-12T05:14:45.000Z","comments":true,"path":"2018/07/12/晚安,好梦/index/","link":"","permalink":"https://lhldream.top/2018/07/12/晚安,好梦/index/","excerpt":"","text":"var NexT = window.NexT || {}; var CONFIG = { root: '/', scheme: 'Gemini', version: '5.1.4', sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"b2t\":true,\"scrollpercent\":true,\"onmobile\":false}, fancybox: true, tabs: true, motion: {\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}}, duoshuo: { userId: '0', author: 'Author' }, algolia: { applicationID: '', apiKey: '', indexName: '', hits: {\"per_page\":10}, labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"} } }; 晚安,好梦 | 睡醒的兔子 睡醒的兔子 当我们认为自己对这个世界已经相当重要的时候，其实这个世界才刚刚准备原谅我们的幼稚。 Home Categories Archives Tags About photos Search 晚安,好梦 Posted on 2018-07-11 | In 人生 很多女孩一旦被人感动了，就会迅速爱上对方。但一直想说，浪漫不是爱，嘘寒问暖不是爱，陪聊陪笑不是爱，那只是泡妞的手段。真正的爱，是牺牲了自己某一部分，来成全你，让你变的更好。所以，不要找一个可以感动你的人，而要找爱你的人。爱不是感动，而是成全。 那时年纪小，有人说爱你，面红耳赤当做没听到。后来你长大了，有人说爱你，你便当成一句玩笑话。再后来，遇见的人越来越多，身边恋人换了又换，爱成了口头禅，不能说不重要，但好像也就只是那个样子而已了。忽然想起当年面红耳赤的自己，才明白，那才是遇见爱情时，最应该有的样子吧。 幸福并不是什么遥不可及的东西，只要安安静静、踏踏实实地过自己的生活，没有上下不定的忧虑，没有左右为难的恍惑，没有瞻前顾后的算计，没有担惊受怕的恐惧，没有求爷爷告奶奶的巴结，幸福的感觉便时时在心头荡漾。幸福其实很简单，只要你的心舍得简单。 真正的爱从来无关风月，只在平淡的流年里变作永恒。 所谓幸福，就是一个笨蛋遇到一个傻瓜，引来无数人的羡慕和妒嫉。 人生，不过是一辆开往尽头的列车，愿有人站在秋天的站台，与你共赴温暖的将来。 相信爱情的人，迟早有一天会遇见爱情。 时光总有一天会将你我拆散，可是即便如此，在那个时刻之前，也让我们在一起吧。 因为有你陪，再孤单的绝望里还是会藏着柳暗花明的盼望。 想看你清早起来迷迷瞪瞪的眼神，想沿着你鼻梁勾勒，想被你紧紧牵住，赖过每一个周六周日阳光正好空气清新的早晨，好像所有不快乐都被穿梭的微风剪碎了，有你太好。 欢迎您扫一扫上面的微信公众号，订阅我的博客！ # 七言 珍惜生活 没有到不了的明天 Candy 不定时分享娱乐内容 14 posts 2 categories 3 tags RSS 0% &copy; 2018 Candy Powered by Hexo | Theme &mdash; NexT.Gemini v5.1.4 本站总访问量 次 | 有人看过我的博客啦 if (Object.prototype.toString.call(window.Promise) !== '[object Function]') { window.Promise = null; } // Popup Window; var isfetched = false; var isXml = true; // Search DB path; var search_path = \"search.xml\"; if (search_path.length === 0) { search_path = \"search.xml\"; } else if (/json$/i.test(search_path)) { isXml = false; } var path = \"/\" + search_path; // monitor main search box; var onPopupClose = function (e) { $('.popup').hide(); $('#local-search-input').val(''); $('.search-result-list').remove(); $('#no-result').remove(); $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); } function proceedsearch() { $(\"body\") .append('') .css('overflow', 'hidden'); $('.search-popup-overlay').click(onPopupClose); $('.popup').toggle(); var $localSearchInput = $('#local-search-input'); $localSearchInput.attr(\"autocapitalize\", \"none\"); $localSearchInput.attr(\"autocorrect\", \"off\"); $localSearchInput.focus(); } // search function; var searchFunc = function(path, search_id, content_id) { 'use strict'; // start loading animation $(\"body\") .append('' + '' + '' + '' + '') .css('overflow', 'hidden'); $(\"#search-loading-icon\").css('margin', '20% auto 0 auto').css('text-align', 'center'); $.ajax({ url: path, dataType: isXml ? \"xml\" : \"json\", async: true, success: function(res) { // get the contents from search data isfetched = true; $('.popup').detach().appendTo('.header-inner'); var datas = isXml ? $(\"entry\", res).map(function() { return { title: $(\"title\", this).text(), content: $(\"content\",this).text(), url: $(\"url\" , this).text() }; }).get() : res; var input = document.getElementById(search_id); var resultContent = document.getElementById(content_id); var inputEventFunction = function() { var searchText = input.value.trim().toLowerCase(); var keywords = searchText.split(/[\\s\\-]+/); if (keywords.length > 1) { keywords.push(searchText); } var resultItems = []; if (searchText.length > 0) { // perform local searching datas.forEach(function(data) { var isMatch = false; var hitCount = 0; var searchTextCount = 0; var title = data.title.trim(); var titleInLowerCase = title.toLowerCase(); var content = data.content.trim().replace(/]+>/g,\"\"); var contentInLowerCase = content.toLowerCase(); var articleUrl = decodeURIComponent(data.url); var indexOfTitle = []; var indexOfContent = []; // only match articles with not empty titles if(title != '') { keywords.forEach(function(keyword) { function getIndexByWord(word, text, caseSensitive) { var wordLen = word.length; if (wordLen === 0) { return []; } var startPosition = 0, position = [], index = []; if (!caseSensitive) { text = text.toLowerCase(); word = word.toLowerCase(); } while ((position = text.indexOf(word, startPosition)) > -1) { index.push({position: position, word: word}); startPosition = position + wordLen; } return index; } indexOfTitle = indexOfTitle.concat(getIndexByWord(keyword, titleInLowerCase, false)); indexOfContent = indexOfContent.concat(getIndexByWord(keyword, contentInLowerCase, false)); }); if (indexOfTitle.length > 0 || indexOfContent.length > 0) { isMatch = true; hitCount = indexOfTitle.length + indexOfContent.length; } } // show search results if (isMatch) { // sort index by position of keyword [indexOfTitle, indexOfContent].forEach(function (index) { index.sort(function (itemLeft, itemRight) { if (itemRight.position !== itemLeft.position) { return itemRight.position - itemLeft.position; } else { return itemLeft.word.length - itemRight.word.length; } }); }); // merge hits into slices function mergeIntoSlice(text, start, end, index) { var item = index[index.length - 1]; var position = item.position; var word = item.word; var hits = []; var searchTextCountInSlice = 0; while (position + word.length position) { index.pop(); } else { break; } } } searchTextCount += searchTextCountInSlice; return { hits: hits, start: start, end: end, searchTextCount: searchTextCountInSlice }; } var slicesOfTitle = []; if (indexOfTitle.length != 0) { slicesOfTitle.push(mergeIntoSlice(title, 0, title.length, indexOfTitle)); } var slicesOfContent = []; while (indexOfContent.length != 0) { var item = indexOfContent[indexOfContent.length - 1]; var position = item.position; var word = item.word; // cut out 100 characters var start = position - 20; var end = position + 80; if(start < 0){ start = 0; } if (end < position + word.length) { end = position + word.length; } if(end > content.length){ end = content.length; } slicesOfContent.push(mergeIntoSlice(content, start, end, indexOfContent)); } // sort slices in content by search text's count and hits' count slicesOfContent.sort(function (sliceLeft, sliceRight) { if (sliceLeft.searchTextCount !== sliceRight.searchTextCount) { return sliceRight.searchTextCount - sliceLeft.searchTextCount; } else if (sliceLeft.hits.length !== sliceRight.hits.length) { return sliceRight.hits.length - sliceLeft.hits.length; } else { return sliceLeft.start - sliceRight.start; } }); // select top N slices in content var upperBound = parseInt('1'); if (upperBound >= 0) { slicesOfContent = slicesOfContent.slice(0, upperBound); } // highlight title and content function highlightKeyword(text, slice) { var result = ''; var prevEnd = slice.start; slice.hits.forEach(function (hit) { result += text.substring(prevEnd, hit.position); var end = hit.position + hit.length; result += '' + text.substring(hit.position, end) + ''; prevEnd = end; }); result += text.substring(prevEnd, slice.end); return result; } var resultItem = ''; if (slicesOfTitle.length != 0) { resultItem += \"\" + highlightKeyword(title, slicesOfTitle[0]) + \"\"; } else { resultItem += \"\" + title + \"\"; } slicesOfContent.forEach(function (slice) { resultItem += \"\" + \"\" + highlightKeyword(content, slice) + \"...\" + \"\"; }); resultItem += \"\"; resultItems.push({ item: resultItem, searchTextCount: searchTextCount, hitCount: hitCount, id: resultItems.length }); } }) }; if (keywords.length === 1 && keywords[0] === \"\") { resultContent.innerHTML = '' } else if (resultItems.length === 0) { resultContent.innerHTML = '' } else { resultItems.sort(function (resultLeft, resultRight) { if (resultLeft.searchTextCount !== resultRight.searchTextCount) { return resultRight.searchTextCount - resultLeft.searchTextCount; } else if (resultLeft.hitCount !== resultRight.hitCount) { return resultRight.hitCount - resultLeft.hitCount; } else { return resultRight.id - resultLeft.id; } }); var searchResultList = ''; resultItems.forEach(function (result) { searchResultList += result.item; }) searchResultList += \"\"; resultContent.innerHTML = searchResultList; } } if ('auto' === 'auto') { input.addEventListener('input', inputEventFunction); } else { $('.search-icon').click(inputEventFunction); input.addEventListener('keypress', function (event) { if (event.keyCode === 13) { inputEventFunction(); } }); } // remove loading animation $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); proceedsearch(); } }); } // handle and trigger popup window; $('.popup-trigger').click(function(e) { e.stopPropagation(); if (isfetched === false) { searchFunc(path, 'local-search-input', 'local-search-result'); } else { proceedsearch(); }; }); $('.popup-btn-close').click(onPopupClose); $('.popup').click(function(e){ e.stopPropagation(); }); $(document).on('keyup', function (event) { var shouldDismissSearchPopup = event.which === 27 && $('.search-popup').is(':visible'); if (shouldDismissSearchPopup) { onPopupClose(); } });","categories":[],"tags":[]},{"title":"","slug":"时光旅行者/index","date":"2018-07-12T06:20:46.189Z","updated":"2018-07-12T05:14:45.000Z","comments":true,"path":"2018/07/12/时光旅行者/index/","link":"","permalink":"https://lhldream.top/2018/07/12/时光旅行者/index/","excerpt":"","text":"var NexT = window.NexT || {}; var CONFIG = { root: '/', scheme: 'Gemini', version: '5.1.4', sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"b2t\":true,\"scrollpercent\":true,\"onmobile\":false}, fancybox: true, tabs: true, motion: {\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}}, duoshuo: { userId: '0', author: 'Author' }, algolia: { applicationID: '', apiKey: '', indexName: '', hits: {\"per_page\":10}, labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"} } }; 时光旅行者 | 睡醒的兔子 睡醒的兔子 当我们认为自己对这个世界已经相当重要的时候，其实这个世界才刚刚准备原谅我们的幼稚。 Home Categories Archives Tags About photos Search 时光旅行者 Posted on 2018-07-11 | In 人生 真正的美丽，不是青春的容颜，而是绽放的心灵；不是俏丽的服饰，而是内在的自信；不是台前翩然的舞姿，而是幕后执著的坚守；不是巧言令色，而是真诚与人；不是物质的附庸，而是知识的光芒。活着自己的执着，活着自己的单纯，活着自己的痴醉，活着自己美丽的梦想。 不去追逐你所渴求，你将永远不会拥有。无论如何，感谢经历，生活的主题就是面对复杂保持欢喜。学会瞭望，给自己一份坚定，学会回眸，拂去浮躁。风雨中把头抬起，辉煌中把心放低。人生顺其自然就好，心安自然快乐。 无论你走得多远，平凡人生就在那里。每个人面前都有一条未知的路，不管你走上了哪条岔路，你一定要相信，态度和性格最终还是会把你引到那条成功的路上，从现在就开始努力吧！ 我们说过的话，做过的事，走过的路，遇过的人，每一个现在，都是我们以后的回忆。无须缅怀昨天，不必奢望明天，只要认真过好每个今天。说能说的话，做可做的事，走该走的路。脚踏实地，不漠视，不虚度，有缘无缘，一切随缘，保持一份好心情，就算心碎也要拥有最美的姿态。 我们说过的话，做过的事，走过的路，遇过的人，每一个现在，都是我们以后的回忆。无须缅怀昨天，不必奢望明天，只要认真过好每个今天。说能说的话，做可做的事，走该走的路。脚踏实地，不漠视，不虚度，有缘无缘，一切随缘，保持一份好心情，就算心碎也要拥有最美的姿态。 没有太晚的开始，不如就从今天行动。总有一天，那个一点一点可见的未来，会在你心里，也在你的脚下慢慢清透。生活，从不亏待每一个努力向上的人。 自己选择的路，再泥泞也要把它走完，或许，泥泞的路上也别有一番风景。所以，未来的路上，好好爱自己，好好珍惜自己。世界的一切不完美，坦然去面对。青春的逝去并不可怕，可怕的是失去了勇敢地热爱生活的心。 人生的奔跑，不在于瞬间的爆发，取决于途中的坚持。你纵有千百个理由放弃，却也总会找一个理由坚持下去。很多时候，成功就是多坚持一分钟，这一分钟不放弃，下一分钟就会有希望。只是我们不知道，这一分钟会在什么时候出现。所以，再苦再累，只要坚持往前走，属于你的风景终会出现。 生活从来不易，我们都是在不断的跌倒中逐渐站起来的。如今这些韬光养晦的艰难日子，都是在为某一天做铺垫，就像那句话说的：总要打败一些你所不喜欢的，才能得到某些你所渴望着的。 经历会使人变得更加成熟，让人懂得幸福与忧伤，快乐与痛苦的真正含义。其实，人们总是在登过幸福的顶峰，再跌落到不幸的深谷之后，才能品尝到快乐与痛苦的滋味，才能明白在这个世上，只有失去才最永恒。 欢迎您扫一扫上面的微信公众号，订阅我的博客！ # 七言 一切事都赶快做,别去等 漫步人生路 Candy 不定时分享娱乐内容 14 posts 2 categories 3 tags RSS 0% &copy; 2018 Candy Powered by Hexo | Theme &mdash; NexT.Gemini v5.1.4 本站总访问量 次 | 有人看过我的博客啦 if (Object.prototype.toString.call(window.Promise) !== '[object Function]') { window.Promise = null; } // Popup Window; var isfetched = false; var isXml = true; // Search DB path; var search_path = \"search.xml\"; if (search_path.length === 0) { search_path = \"search.xml\"; } else if (/json$/i.test(search_path)) { isXml = false; } var path = \"/\" + search_path; // monitor main search box; var onPopupClose = function (e) { $('.popup').hide(); $('#local-search-input').val(''); $('.search-result-list').remove(); $('#no-result').remove(); $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); } function proceedsearch() { $(\"body\") .append('') .css('overflow', 'hidden'); $('.search-popup-overlay').click(onPopupClose); $('.popup').toggle(); var $localSearchInput = $('#local-search-input'); $localSearchInput.attr(\"autocapitalize\", \"none\"); $localSearchInput.attr(\"autocorrect\", \"off\"); $localSearchInput.focus(); } // search function; var searchFunc = function(path, search_id, content_id) { 'use strict'; // start loading animation $(\"body\") .append('' + '' + '' + '' + '') .css('overflow', 'hidden'); $(\"#search-loading-icon\").css('margin', '20% auto 0 auto').css('text-align', 'center'); $.ajax({ url: path, dataType: isXml ? \"xml\" : \"json\", async: true, success: function(res) { // get the contents from search data isfetched = true; $('.popup').detach().appendTo('.header-inner'); var datas = isXml ? $(\"entry\", res).map(function() { return { title: $(\"title\", this).text(), content: $(\"content\",this).text(), url: $(\"url\" , this).text() }; }).get() : res; var input = document.getElementById(search_id); var resultContent = document.getElementById(content_id); var inputEventFunction = function() { var searchText = input.value.trim().toLowerCase(); var keywords = searchText.split(/[\\s\\-]+/); if (keywords.length > 1) { keywords.push(searchText); } var resultItems = []; if (searchText.length > 0) { // perform local searching datas.forEach(function(data) { var isMatch = false; var hitCount = 0; var searchTextCount = 0; var title = data.title.trim(); var titleInLowerCase = title.toLowerCase(); var content = data.content.trim().replace(/]+>/g,\"\"); var contentInLowerCase = content.toLowerCase(); var articleUrl = decodeURIComponent(data.url); var indexOfTitle = []; var indexOfContent = []; // only match articles with not empty titles if(title != '') { keywords.forEach(function(keyword) { function getIndexByWord(word, text, caseSensitive) { var wordLen = word.length; if (wordLen === 0) { return []; } var startPosition = 0, position = [], index = []; if (!caseSensitive) { text = text.toLowerCase(); word = word.toLowerCase(); } while ((position = text.indexOf(word, startPosition)) > -1) { index.push({position: position, word: word}); startPosition = position + wordLen; } return index; } indexOfTitle = indexOfTitle.concat(getIndexByWord(keyword, titleInLowerCase, false)); indexOfContent = indexOfContent.concat(getIndexByWord(keyword, contentInLowerCase, false)); }); if (indexOfTitle.length > 0 || indexOfContent.length > 0) { isMatch = true; hitCount = indexOfTitle.length + indexOfContent.length; } } // show search results if (isMatch) { // sort index by position of keyword [indexOfTitle, indexOfContent].forEach(function (index) { index.sort(function (itemLeft, itemRight) { if (itemRight.position !== itemLeft.position) { return itemRight.position - itemLeft.position; } else { return itemLeft.word.length - itemRight.word.length; } }); }); // merge hits into slices function mergeIntoSlice(text, start, end, index) { var item = index[index.length - 1]; var position = item.position; var word = item.word; var hits = []; var searchTextCountInSlice = 0; while (position + word.length position) { index.pop(); } else { break; } } } searchTextCount += searchTextCountInSlice; return { hits: hits, start: start, end: end, searchTextCount: searchTextCountInSlice }; } var slicesOfTitle = []; if (indexOfTitle.length != 0) { slicesOfTitle.push(mergeIntoSlice(title, 0, title.length, indexOfTitle)); } var slicesOfContent = []; while (indexOfContent.length != 0) { var item = indexOfContent[indexOfContent.length - 1]; var position = item.position; var word = item.word; // cut out 100 characters var start = position - 20; var end = position + 80; if(start < 0){ start = 0; } if (end < position + word.length) { end = position + word.length; } if(end > content.length){ end = content.length; } slicesOfContent.push(mergeIntoSlice(content, start, end, indexOfContent)); } // sort slices in content by search text's count and hits' count slicesOfContent.sort(function (sliceLeft, sliceRight) { if (sliceLeft.searchTextCount !== sliceRight.searchTextCount) { return sliceRight.searchTextCount - sliceLeft.searchTextCount; } else if (sliceLeft.hits.length !== sliceRight.hits.length) { return sliceRight.hits.length - sliceLeft.hits.length; } else { return sliceLeft.start - sliceRight.start; } }); // select top N slices in content var upperBound = parseInt('1'); if (upperBound >= 0) { slicesOfContent = slicesOfContent.slice(0, upperBound); } // highlight title and content function highlightKeyword(text, slice) { var result = ''; var prevEnd = slice.start; slice.hits.forEach(function (hit) { result += text.substring(prevEnd, hit.position); var end = hit.position + hit.length; result += '' + text.substring(hit.position, end) + ''; prevEnd = end; }); result += text.substring(prevEnd, slice.end); return result; } var resultItem = ''; if (slicesOfTitle.length != 0) { resultItem += \"\" + highlightKeyword(title, slicesOfTitle[0]) + \"\"; } else { resultItem += \"\" + title + \"\"; } slicesOfContent.forEach(function (slice) { resultItem += \"\" + \"\" + highlightKeyword(content, slice) + \"...\" + \"\"; }); resultItem += \"\"; resultItems.push({ item: resultItem, searchTextCount: searchTextCount, hitCount: hitCount, id: resultItems.length }); } }) }; if (keywords.length === 1 && keywords[0] === \"\") { resultContent.innerHTML = '' } else if (resultItems.length === 0) { resultContent.innerHTML = '' } else { resultItems.sort(function (resultLeft, resultRight) { if (resultLeft.searchTextCount !== resultRight.searchTextCount) { return resultRight.searchTextCount - resultLeft.searchTextCount; } else if (resultLeft.hitCount !== resultRight.hitCount) { return resultRight.hitCount - resultLeft.hitCount; } else { return resultRight.id - resultLeft.id; } }); var searchResultList = ''; resultItems.forEach(function (result) { searchResultList += result.item; }) searchResultList += \"\"; resultContent.innerHTML = searchResultList; } } if ('auto' === 'auto') { input.addEventListener('input', inputEventFunction); } else { $('.search-icon').click(inputEventFunction); input.addEventListener('keypress', function (event) { if (event.keyCode === 13) { inputEventFunction(); } }); } // remove loading animation $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); proceedsearch(); } }); } // handle and trigger popup window; $('.popup-trigger').click(function(e) { e.stopPropagation(); if (isfetched === false) { searchFunc(path, 'local-search-input', 'local-search-result'); } else { proceedsearch(); }; }); $('.popup-btn-close').click(onPopupClose); $('.popup').click(function(e){ e.stopPropagation(); }); $(document).on('keyup', function (event) { var shouldDismissSearchPopup = event.which === 27 && $('.search-popup').is(':visible'); if (shouldDismissSearchPopup) { onPopupClose(); } });","categories":[],"tags":[]},{"title":"","slug":"人生悟语/index","date":"2018-07-12T06:20:45.651Z","updated":"2018-07-12T05:14:45.000Z","comments":true,"path":"2018/07/12/人生悟语/index/","link":"","permalink":"https://lhldream.top/2018/07/12/人生悟语/index/","excerpt":"","text":"var NexT = window.NexT || {}; var CONFIG = { root: '/', scheme: 'Gemini', version: '5.1.4', sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"b2t\":true,\"scrollpercent\":true,\"onmobile\":false}, fancybox: true, tabs: true, motion: {\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}}, duoshuo: { userId: '0', author: 'Author' }, algolia: { applicationID: '', apiKey: '', indexName: '', hits: {\"per_page\":10}, labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"} } }; 人生悟语 | 睡醒的兔子 睡醒的兔子 当我们认为自己对这个世界已经相当重要的时候，其实这个世界才刚刚准备原谅我们的幼稚。 Home Categories Archives Tags About photos Search 人生悟语 Posted on 2018-07-11 | In 人生 生命太短，一分钟都不能留给那些让你不快的人或事。一个人时，善待自己；两个人时，善待对方。 一路上走来，我们总会患得患失，总会放弃不了某件事，总是天真地以为：只要坚持就有结果，只要执着就有希望。 世界上最动人的情话就是：你是我一个人的，爱情最美丽的誓言就是：我在时光的尽头等你。 做人要有平常心，这一生，最无法预见的，是遇见。我们不知在哪一眼，就是开始。这一生，最无法告别的，是离别。不知哪一眼，就是诀别。从遇见到诀别，人生如此奇妙的静静谱写着悲欢。 如果坚强的人落泪了，一定是撑不下去了；如果执着的心放弃了，一定是伤得彻底了。昨天永远是过去式，今天永远是进行式，明天永远是幻想式，天天都是方程式。 若只是初见，一切美好都不会遗失。很多时候，初见，惊艳。蓦然回首，却已是物是人非，沧海桑田。 不恋尘世浮华，不写红尘纷扰，不叹世道苍凉，不惹情思哀怨，闲看花开，静待花落，冷暖自知，干净如始。 人生是条单行线，是条只能前行无法倒退或是逆向行驶的路径，面对人生，其实我们可以做的事情很少，我们想要主宰自己的人生，惟一可以做的事情就是往前走，继续往前走，永远往前走，千万别想到向后转，因为，你的后面根本就已经无路可退。 总有许多事，需要你一个人扛。别畏惧孤独，它能帮你划清内心的清浊，是你无法拒绝的命运历程；别躲避困苦，莫让冷世的尘埃，冰封你的笑容，迟滞你的步履。走得越久，时光越老，人心越淡。忘不掉昨天，它就是束缚你的阴影；向往着明天，你才能描绘它的模样。 我们都还年轻，多走几步路，多欣赏下沿途的风景，不要急于抵达目的地而错过了流年里温暖的人和物；趁我们都还年轻，多说些浪漫的话语，多做些幼稚的事情，不要嫌人笑话错过了生命中最美好的片段和场合；趁我们都还年轻，把距离缩短，把时间延长。趁我们都还年轻，多做些我们想要做的任何事。 欢迎您扫一扫上面的微信公众号，订阅我的博客！ # 七言 唯有爱不可辜负 人生若只如初见 Candy 不定时分享娱乐内容 14 posts 2 categories 3 tags RSS 0% &copy; 2018 Candy Powered by Hexo | Theme &mdash; NexT.Gemini v5.1.4 本站总访问量 次 | 有人看过我的博客啦 if (Object.prototype.toString.call(window.Promise) !== '[object Function]') { window.Promise = null; } // Popup Window; var isfetched = false; var isXml = true; // Search DB path; var search_path = \"search.xml\"; if (search_path.length === 0) { search_path = \"search.xml\"; } else if (/json$/i.test(search_path)) { isXml = false; } var path = \"/\" + search_path; // monitor main search box; var onPopupClose = function (e) { $('.popup').hide(); $('#local-search-input').val(''); $('.search-result-list').remove(); $('#no-result').remove(); $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); } function proceedsearch() { $(\"body\") .append('') .css('overflow', 'hidden'); $('.search-popup-overlay').click(onPopupClose); $('.popup').toggle(); var $localSearchInput = $('#local-search-input'); $localSearchInput.attr(\"autocapitalize\", \"none\"); $localSearchInput.attr(\"autocorrect\", \"off\"); $localSearchInput.focus(); } // search function; var searchFunc = function(path, search_id, content_id) { 'use strict'; // start loading animation $(\"body\") .append('' + '' + '' + '' + '') .css('overflow', 'hidden'); $(\"#search-loading-icon\").css('margin', '20% auto 0 auto').css('text-align', 'center'); $.ajax({ url: path, dataType: isXml ? \"xml\" : \"json\", async: true, success: function(res) { // get the contents from search data isfetched = true; $('.popup').detach().appendTo('.header-inner'); var datas = isXml ? $(\"entry\", res).map(function() { return { title: $(\"title\", this).text(), content: $(\"content\",this).text(), url: $(\"url\" , this).text() }; }).get() : res; var input = document.getElementById(search_id); var resultContent = document.getElementById(content_id); var inputEventFunction = function() { var searchText = input.value.trim().toLowerCase(); var keywords = searchText.split(/[\\s\\-]+/); if (keywords.length > 1) { keywords.push(searchText); } var resultItems = []; if (searchText.length > 0) { // perform local searching datas.forEach(function(data) { var isMatch = false; var hitCount = 0; var searchTextCount = 0; var title = data.title.trim(); var titleInLowerCase = title.toLowerCase(); var content = data.content.trim().replace(/]+>/g,\"\"); var contentInLowerCase = content.toLowerCase(); var articleUrl = decodeURIComponent(data.url); var indexOfTitle = []; var indexOfContent = []; // only match articles with not empty titles if(title != '') { keywords.forEach(function(keyword) { function getIndexByWord(word, text, caseSensitive) { var wordLen = word.length; if (wordLen === 0) { return []; } var startPosition = 0, position = [], index = []; if (!caseSensitive) { text = text.toLowerCase(); word = word.toLowerCase(); } while ((position = text.indexOf(word, startPosition)) > -1) { index.push({position: position, word: word}); startPosition = position + wordLen; } return index; } indexOfTitle = indexOfTitle.concat(getIndexByWord(keyword, titleInLowerCase, false)); indexOfContent = indexOfContent.concat(getIndexByWord(keyword, contentInLowerCase, false)); }); if (indexOfTitle.length > 0 || indexOfContent.length > 0) { isMatch = true; hitCount = indexOfTitle.length + indexOfContent.length; } } // show search results if (isMatch) { // sort index by position of keyword [indexOfTitle, indexOfContent].forEach(function (index) { index.sort(function (itemLeft, itemRight) { if (itemRight.position !== itemLeft.position) { return itemRight.position - itemLeft.position; } else { return itemLeft.word.length - itemRight.word.length; } }); }); // merge hits into slices function mergeIntoSlice(text, start, end, index) { var item = index[index.length - 1]; var position = item.position; var word = item.word; var hits = []; var searchTextCountInSlice = 0; while (position + word.length position) { index.pop(); } else { break; } } } searchTextCount += searchTextCountInSlice; return { hits: hits, start: start, end: end, searchTextCount: searchTextCountInSlice }; } var slicesOfTitle = []; if (indexOfTitle.length != 0) { slicesOfTitle.push(mergeIntoSlice(title, 0, title.length, indexOfTitle)); } var slicesOfContent = []; while (indexOfContent.length != 0) { var item = indexOfContent[indexOfContent.length - 1]; var position = item.position; var word = item.word; // cut out 100 characters var start = position - 20; var end = position + 80; if(start < 0){ start = 0; } if (end < position + word.length) { end = position + word.length; } if(end > content.length){ end = content.length; } slicesOfContent.push(mergeIntoSlice(content, start, end, indexOfContent)); } // sort slices in content by search text's count and hits' count slicesOfContent.sort(function (sliceLeft, sliceRight) { if (sliceLeft.searchTextCount !== sliceRight.searchTextCount) { return sliceRight.searchTextCount - sliceLeft.searchTextCount; } else if (sliceLeft.hits.length !== sliceRight.hits.length) { return sliceRight.hits.length - sliceLeft.hits.length; } else { return sliceLeft.start - sliceRight.start; } }); // select top N slices in content var upperBound = parseInt('1'); if (upperBound >= 0) { slicesOfContent = slicesOfContent.slice(0, upperBound); } // highlight title and content function highlightKeyword(text, slice) { var result = ''; var prevEnd = slice.start; slice.hits.forEach(function (hit) { result += text.substring(prevEnd, hit.position); var end = hit.position + hit.length; result += '' + text.substring(hit.position, end) + ''; prevEnd = end; }); result += text.substring(prevEnd, slice.end); return result; } var resultItem = ''; if (slicesOfTitle.length != 0) { resultItem += \"\" + highlightKeyword(title, slicesOfTitle[0]) + \"\"; } else { resultItem += \"\" + title + \"\"; } slicesOfContent.forEach(function (slice) { resultItem += \"\" + \"\" + highlightKeyword(content, slice) + \"...\" + \"\"; }); resultItem += \"\"; resultItems.push({ item: resultItem, searchTextCount: searchTextCount, hitCount: hitCount, id: resultItems.length }); } }) }; if (keywords.length === 1 && keywords[0] === \"\") { resultContent.innerHTML = '' } else if (resultItems.length === 0) { resultContent.innerHTML = '' } else { resultItems.sort(function (resultLeft, resultRight) { if (resultLeft.searchTextCount !== resultRight.searchTextCount) { return resultRight.searchTextCount - resultLeft.searchTextCount; } else if (resultLeft.hitCount !== resultRight.hitCount) { return resultRight.hitCount - resultLeft.hitCount; } else { return resultRight.id - resultLeft.id; } }); var searchResultList = ''; resultItems.forEach(function (result) { searchResultList += result.item; }) searchResultList += \"\"; resultContent.innerHTML = searchResultList; } } if ('auto' === 'auto') { input.addEventListener('input', inputEventFunction); } else { $('.search-icon').click(inputEventFunction); input.addEventListener('keypress', function (event) { if (event.keyCode === 13) { inputEventFunction(); } }); } // remove loading animation $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); proceedsearch(); } }); } // handle and trigger popup window; $('.popup-trigger').click(function(e) { e.stopPropagation(); if (isfetched === false) { searchFunc(path, 'local-search-input', 'local-search-result'); } else { proceedsearch(); }; }); $('.popup-btn-close').click(onPopupClose); $('.popup').click(function(e){ e.stopPropagation(); }); $(document).on('keyup', function (event) { var shouldDismissSearchPopup = event.which === 27 && $('.search-popup').is(':visible'); if (shouldDismissSearchPopup) { onPopupClose(); } });","categories":[],"tags":[]},{"title":"","slug":"人生若只如初见/index","date":"2018-07-12T06:20:45.130Z","updated":"2018-07-12T05:14:45.000Z","comments":true,"path":"2018/07/12/人生若只如初见/index/","link":"","permalink":"https://lhldream.top/2018/07/12/人生若只如初见/index/","excerpt":"","text":"var NexT = window.NexT || {}; var CONFIG = { root: '/', scheme: 'Gemini', version: '5.1.4', sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"b2t\":true,\"scrollpercent\":true,\"onmobile\":false}, fancybox: true, tabs: true, motion: {\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}}, duoshuo: { userId: '0', author: 'Author' }, algolia: { applicationID: '', apiKey: '', indexName: '', hits: {\"per_page\":10}, labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"} } }; 人生若只如初见 | 睡醒的兔子 睡醒的兔子 当我们认为自己对这个世界已经相当重要的时候，其实这个世界才刚刚准备原谅我们的幼稚。 Home Categories Archives Tags About photos Search 人生若只如初见 Posted on 2018-07-11 | In 人生 人生需要有拿得起的魄力，更需要放得下的勇气！因为拿得起是一种能力，放得下却是一种智慧。拿得起的是生存，放得下的生活！ 世间最大的抱憾，是我们近在咫尺，却不懂彼此的沉默；最大的错失，是明知前方无路，却固执得不想转弯。 过去的请把它忘记，放下追逐，清风就会来！你放开眉头，世界就会快乐！菩提本无树，明镜亦非台，本来无一物，何处惹尘埃！ 坦然面对世事，提起来千斤重，放得下二两轻。知从容：潇洒驰骋人生，事从容有余味，人从容有余年。学会放下，人生才精彩。 学会放下，懂得从容。人生在世，难免会遇到很多不如意，生活中出现不顺心的事情，不要心怀不满、怨气冲天，也不必耿耿于怀、一蹶不振，是福是祸都得面对，是好是坏都会过去。 不要在意别人在背后怎么看你说你，因为这些言语改变不了事实，却可能搅乱你的心。心如果乱了，一切就都乱了。理解你的人，不需要解释；不理解你的人，不用你解释。因为日久不一定生情，但一定见人心。 给自己一片没有退路的悬崖，就是给自己一个向生命高地冲锋的机会。清清楚楚看昨天，扎扎实实抓今天，高高兴兴看明天。向昨天要经验，向明天要动力，向今天要成果。记住昨天，思索明天，善待今天！ 人生像是一篇文章，离不开各式的标点。成长不是一路一路获得，乐观的人，他不管遇到什么困难，什么苦楚，什么意外，从不悲观，从不灰心，从不失志，总是顽强地在逆境中拼搏，在坎坷中迈进。总是坦坦然然，快快乐乐地历经人生的里程。 当一个人有了强烈的想要改变自我的意愿，或者逐渐的变的好起来之后，便会不自觉的对周围的一切产生要求。个人力量是有限的，只有实现了资源的优化组合，与志同道合者合作，才能实现仅凭自己无法达成的愿望。 跌倒的时候，要能认识障碍，勇敢站起；失意的时候，要能自我检讨，再次出发；困难的时候，要能冷静分析，寻找突破；彷徨的时候，要能看清目标，不变方向。 欢迎您扫一扫上面的微信公众号，订阅我的博客！ # 七言 人生悟语 一切事都赶快做,别去等 Candy 不定时分享娱乐内容 14 posts 2 categories 3 tags RSS 0% &copy; 2018 Candy Powered by Hexo | Theme &mdash; NexT.Gemini v5.1.4 本站总访问量 次 | 有人看过我的博客啦 if (Object.prototype.toString.call(window.Promise) !== '[object Function]') { window.Promise = null; } // Popup Window; var isfetched = false; var isXml = true; // Search DB path; var search_path = \"search.xml\"; if (search_path.length === 0) { search_path = \"search.xml\"; } else if (/json$/i.test(search_path)) { isXml = false; } var path = \"/\" + search_path; // monitor main search box; var onPopupClose = function (e) { $('.popup').hide(); $('#local-search-input').val(''); $('.search-result-list').remove(); $('#no-result').remove(); $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); } function proceedsearch() { $(\"body\") .append('') .css('overflow', 'hidden'); $('.search-popup-overlay').click(onPopupClose); $('.popup').toggle(); var $localSearchInput = $('#local-search-input'); $localSearchInput.attr(\"autocapitalize\", \"none\"); $localSearchInput.attr(\"autocorrect\", \"off\"); $localSearchInput.focus(); } // search function; var searchFunc = function(path, search_id, content_id) { 'use strict'; // start loading animation $(\"body\") .append('' + '' + '' + '' + '') .css('overflow', 'hidden'); $(\"#search-loading-icon\").css('margin', '20% auto 0 auto').css('text-align', 'center'); $.ajax({ url: path, dataType: isXml ? \"xml\" : \"json\", async: true, success: function(res) { // get the contents from search data isfetched = true; $('.popup').detach().appendTo('.header-inner'); var datas = isXml ? $(\"entry\", res).map(function() { return { title: $(\"title\", this).text(), content: $(\"content\",this).text(), url: $(\"url\" , this).text() }; }).get() : res; var input = document.getElementById(search_id); var resultContent = document.getElementById(content_id); var inputEventFunction = function() { var searchText = input.value.trim().toLowerCase(); var keywords = searchText.split(/[\\s\\-]+/); if (keywords.length > 1) { keywords.push(searchText); } var resultItems = []; if (searchText.length > 0) { // perform local searching datas.forEach(function(data) { var isMatch = false; var hitCount = 0; var searchTextCount = 0; var title = data.title.trim(); var titleInLowerCase = title.toLowerCase(); var content = data.content.trim().replace(/]+>/g,\"\"); var contentInLowerCase = content.toLowerCase(); var articleUrl = decodeURIComponent(data.url); var indexOfTitle = []; var indexOfContent = []; // only match articles with not empty titles if(title != '') { keywords.forEach(function(keyword) { function getIndexByWord(word, text, caseSensitive) { var wordLen = word.length; if (wordLen === 0) { return []; } var startPosition = 0, position = [], index = []; if (!caseSensitive) { text = text.toLowerCase(); word = word.toLowerCase(); } while ((position = text.indexOf(word, startPosition)) > -1) { index.push({position: position, word: word}); startPosition = position + wordLen; } return index; } indexOfTitle = indexOfTitle.concat(getIndexByWord(keyword, titleInLowerCase, false)); indexOfContent = indexOfContent.concat(getIndexByWord(keyword, contentInLowerCase, false)); }); if (indexOfTitle.length > 0 || indexOfContent.length > 0) { isMatch = true; hitCount = indexOfTitle.length + indexOfContent.length; } } // show search results if (isMatch) { // sort index by position of keyword [indexOfTitle, indexOfContent].forEach(function (index) { index.sort(function (itemLeft, itemRight) { if (itemRight.position !== itemLeft.position) { return itemRight.position - itemLeft.position; } else { return itemLeft.word.length - itemRight.word.length; } }); }); // merge hits into slices function mergeIntoSlice(text, start, end, index) { var item = index[index.length - 1]; var position = item.position; var word = item.word; var hits = []; var searchTextCountInSlice = 0; while (position + word.length position) { index.pop(); } else { break; } } } searchTextCount += searchTextCountInSlice; return { hits: hits, start: start, end: end, searchTextCount: searchTextCountInSlice }; } var slicesOfTitle = []; if (indexOfTitle.length != 0) { slicesOfTitle.push(mergeIntoSlice(title, 0, title.length, indexOfTitle)); } var slicesOfContent = []; while (indexOfContent.length != 0) { var item = indexOfContent[indexOfContent.length - 1]; var position = item.position; var word = item.word; // cut out 100 characters var start = position - 20; var end = position + 80; if(start < 0){ start = 0; } if (end < position + word.length) { end = position + word.length; } if(end > content.length){ end = content.length; } slicesOfContent.push(mergeIntoSlice(content, start, end, indexOfContent)); } // sort slices in content by search text's count and hits' count slicesOfContent.sort(function (sliceLeft, sliceRight) { if (sliceLeft.searchTextCount !== sliceRight.searchTextCount) { return sliceRight.searchTextCount - sliceLeft.searchTextCount; } else if (sliceLeft.hits.length !== sliceRight.hits.length) { return sliceRight.hits.length - sliceLeft.hits.length; } else { return sliceLeft.start - sliceRight.start; } }); // select top N slices in content var upperBound = parseInt('1'); if (upperBound >= 0) { slicesOfContent = slicesOfContent.slice(0, upperBound); } // highlight title and content function highlightKeyword(text, slice) { var result = ''; var prevEnd = slice.start; slice.hits.forEach(function (hit) { result += text.substring(prevEnd, hit.position); var end = hit.position + hit.length; result += '' + text.substring(hit.position, end) + ''; prevEnd = end; }); result += text.substring(prevEnd, slice.end); return result; } var resultItem = ''; if (slicesOfTitle.length != 0) { resultItem += \"\" + highlightKeyword(title, slicesOfTitle[0]) + \"\"; } else { resultItem += \"\" + title + \"\"; } slicesOfContent.forEach(function (slice) { resultItem += \"\" + \"\" + highlightKeyword(content, slice) + \"...\" + \"\"; }); resultItem += \"\"; resultItems.push({ item: resultItem, searchTextCount: searchTextCount, hitCount: hitCount, id: resultItems.length }); } }) }; if (keywords.length === 1 && keywords[0] === \"\") { resultContent.innerHTML = '' } else if (resultItems.length === 0) { resultContent.innerHTML = '' } else { resultItems.sort(function (resultLeft, resultRight) { if (resultLeft.searchTextCount !== resultRight.searchTextCount) { return resultRight.searchTextCount - resultLeft.searchTextCount; } else if (resultLeft.hitCount !== resultRight.hitCount) { return resultRight.hitCount - resultLeft.hitCount; } else { return resultRight.id - resultLeft.id; } }); var searchResultList = ''; resultItems.forEach(function (result) { searchResultList += result.item; }) searchResultList += \"\"; resultContent.innerHTML = searchResultList; } } if ('auto' === 'auto') { input.addEventListener('input', inputEventFunction); } else { $('.search-icon').click(inputEventFunction); input.addEventListener('keypress', function (event) { if (event.keyCode === 13) { inputEventFunction(); } }); } // remove loading animation $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); proceedsearch(); } }); } // handle and trigger popup window; $('.popup-trigger').click(function(e) { e.stopPropagation(); if (isfetched === false) { searchFunc(path, 'local-search-input', 'local-search-result'); } else { proceedsearch(); }; }); $('.popup-btn-close').click(onPopupClose); $('.popup').click(function(e){ e.stopPropagation(); }); $(document).on('keyup', function (event) { var shouldDismissSearchPopup = event.which === 27 && $('.search-popup').is(':visible'); if (shouldDismissSearchPopup) { onPopupClose(); } });","categories":[],"tags":[]},{"title":"","slug":"情愿得一人心,白首不分离/index","date":"2018-07-12T06:20:44.659Z","updated":"2018-07-12T05:14:45.000Z","comments":true,"path":"2018/07/12/情愿得一人心,白首不分离/index/","link":"","permalink":"https://lhldream.top/2018/07/12/情愿得一人心,白首不分离/index/","excerpt":"","text":"var NexT = window.NexT || {}; var CONFIG = { root: '/', scheme: 'Gemini', version: '5.1.4', sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"b2t\":true,\"scrollpercent\":true,\"onmobile\":false}, fancybox: true, tabs: true, motion: {\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}}, duoshuo: { userId: '0', author: 'Author' }, algolia: { applicationID: '', apiKey: '', indexName: '', hits: {\"per_page\":10}, labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"} } }; 情愿得一人心,白首不分离 | 睡醒的兔子 睡醒的兔子 当我们认为自己对这个世界已经相当重要的时候，其实这个世界才刚刚准备原谅我们的幼稚。 Home Categories Archives Tags About photos Search 情愿得一人心,白首不分离 Posted on 2018-07-11 | In 人生 你知道什么叫意外吗？就是我从没想过会遇见你，但我遇见了，我从没想过会爱你，但我还是爱了。 你的名字，是我读过最短的情诗。我很喜欢你，像春去秋来，海棠花开。 三生有幸遇见你，人生只有两次幸运就好，一次遇见你，一次走到底。 你不用多好，我喜欢就好，我不是很好，你不嫌弃就好。 喜欢你时，你每一句漫不经心的话，都在我心里开出漫山遍野的花。 因为喜欢你，借着你的光，瞧见了从未预见的世界。 我在这个世界上，走走停停，寻寻觅觅，就是为了和你相遇。 你看，这么多人，这么大的世界，我遇到了你，你也遇到了我，真好。 我对爱情的要求很简单：找一个我爱的也爱我的人手牵着手，从白天走到黑夜，从黑头发走到白头发；走累了就停下来，一起欣赏风景，一起唠嗑岁月。 我打算爱你很久很久，没有想要放弃的念头。 欢迎您扫一扫上面的微信公众号，订阅我的博客！ # 七言 亲爱的对不起!我又在想你了~ 唯有爱不可辜负 Candy 不定时分享娱乐内容 14 posts 2 categories 3 tags RSS 0% &copy; 2018 Candy Powered by Hexo | Theme &mdash; NexT.Gemini v5.1.4 本站总访问量 次 | 有人看过我的博客啦 if (Object.prototype.toString.call(window.Promise) !== '[object Function]') { window.Promise = null; } // Popup Window; var isfetched = false; var isXml = true; // Search DB path; var search_path = \"search.xml\"; if (search_path.length === 0) { search_path = \"search.xml\"; } else if (/json$/i.test(search_path)) { isXml = false; } var path = \"/\" + search_path; // monitor main search box; var onPopupClose = function (e) { $('.popup').hide(); $('#local-search-input').val(''); $('.search-result-list').remove(); $('#no-result').remove(); $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); } function proceedsearch() { $(\"body\") .append('') .css('overflow', 'hidden'); $('.search-popup-overlay').click(onPopupClose); $('.popup').toggle(); var $localSearchInput = $('#local-search-input'); $localSearchInput.attr(\"autocapitalize\", \"none\"); $localSearchInput.attr(\"autocorrect\", \"off\"); $localSearchInput.focus(); } // search function; var searchFunc = function(path, search_id, content_id) { 'use strict'; // start loading animation $(\"body\") .append('' + '' + '' + '' + '') .css('overflow', 'hidden'); $(\"#search-loading-icon\").css('margin', '20% auto 0 auto').css('text-align', 'center'); $.ajax({ url: path, dataType: isXml ? \"xml\" : \"json\", async: true, success: function(res) { // get the contents from search data isfetched = true; $('.popup').detach().appendTo('.header-inner'); var datas = isXml ? $(\"entry\", res).map(function() { return { title: $(\"title\", this).text(), content: $(\"content\",this).text(), url: $(\"url\" , this).text() }; }).get() : res; var input = document.getElementById(search_id); var resultContent = document.getElementById(content_id); var inputEventFunction = function() { var searchText = input.value.trim().toLowerCase(); var keywords = searchText.split(/[\\s\\-]+/); if (keywords.length > 1) { keywords.push(searchText); } var resultItems = []; if (searchText.length > 0) { // perform local searching datas.forEach(function(data) { var isMatch = false; var hitCount = 0; var searchTextCount = 0; var title = data.title.trim(); var titleInLowerCase = title.toLowerCase(); var content = data.content.trim().replace(/]+>/g,\"\"); var contentInLowerCase = content.toLowerCase(); var articleUrl = decodeURIComponent(data.url); var indexOfTitle = []; var indexOfContent = []; // only match articles with not empty titles if(title != '') { keywords.forEach(function(keyword) { function getIndexByWord(word, text, caseSensitive) { var wordLen = word.length; if (wordLen === 0) { return []; } var startPosition = 0, position = [], index = []; if (!caseSensitive) { text = text.toLowerCase(); word = word.toLowerCase(); } while ((position = text.indexOf(word, startPosition)) > -1) { index.push({position: position, word: word}); startPosition = position + wordLen; } return index; } indexOfTitle = indexOfTitle.concat(getIndexByWord(keyword, titleInLowerCase, false)); indexOfContent = indexOfContent.concat(getIndexByWord(keyword, contentInLowerCase, false)); }); if (indexOfTitle.length > 0 || indexOfContent.length > 0) { isMatch = true; hitCount = indexOfTitle.length + indexOfContent.length; } } // show search results if (isMatch) { // sort index by position of keyword [indexOfTitle, indexOfContent].forEach(function (index) { index.sort(function (itemLeft, itemRight) { if (itemRight.position !== itemLeft.position) { return itemRight.position - itemLeft.position; } else { return itemLeft.word.length - itemRight.word.length; } }); }); // merge hits into slices function mergeIntoSlice(text, start, end, index) { var item = index[index.length - 1]; var position = item.position; var word = item.word; var hits = []; var searchTextCountInSlice = 0; while (position + word.length position) { index.pop(); } else { break; } } } searchTextCount += searchTextCountInSlice; return { hits: hits, start: start, end: end, searchTextCount: searchTextCountInSlice }; } var slicesOfTitle = []; if (indexOfTitle.length != 0) { slicesOfTitle.push(mergeIntoSlice(title, 0, title.length, indexOfTitle)); } var slicesOfContent = []; while (indexOfContent.length != 0) { var item = indexOfContent[indexOfContent.length - 1]; var position = item.position; var word = item.word; // cut out 100 characters var start = position - 20; var end = position + 80; if(start < 0){ start = 0; } if (end < position + word.length) { end = position + word.length; } if(end > content.length){ end = content.length; } slicesOfContent.push(mergeIntoSlice(content, start, end, indexOfContent)); } // sort slices in content by search text's count and hits' count slicesOfContent.sort(function (sliceLeft, sliceRight) { if (sliceLeft.searchTextCount !== sliceRight.searchTextCount) { return sliceRight.searchTextCount - sliceLeft.searchTextCount; } else if (sliceLeft.hits.length !== sliceRight.hits.length) { return sliceRight.hits.length - sliceLeft.hits.length; } else { return sliceLeft.start - sliceRight.start; } }); // select top N slices in content var upperBound = parseInt('1'); if (upperBound >= 0) { slicesOfContent = slicesOfContent.slice(0, upperBound); } // highlight title and content function highlightKeyword(text, slice) { var result = ''; var prevEnd = slice.start; slice.hits.forEach(function (hit) { result += text.substring(prevEnd, hit.position); var end = hit.position + hit.length; result += '' + text.substring(hit.position, end) + ''; prevEnd = end; }); result += text.substring(prevEnd, slice.end); return result; } var resultItem = ''; if (slicesOfTitle.length != 0) { resultItem += \"\" + highlightKeyword(title, slicesOfTitle[0]) + \"\"; } else { resultItem += \"\" + title + \"\"; } slicesOfContent.forEach(function (slice) { resultItem += \"\" + \"\" + highlightKeyword(content, slice) + \"...\" + \"\"; }); resultItem += \"\"; resultItems.push({ item: resultItem, searchTextCount: searchTextCount, hitCount: hitCount, id: resultItems.length }); } }) }; if (keywords.length === 1 && keywords[0] === \"\") { resultContent.innerHTML = '' } else if (resultItems.length === 0) { resultContent.innerHTML = '' } else { resultItems.sort(function (resultLeft, resultRight) { if (resultLeft.searchTextCount !== resultRight.searchTextCount) { return resultRight.searchTextCount - resultLeft.searchTextCount; } else if (resultLeft.hitCount !== resultRight.hitCount) { return resultRight.hitCount - resultLeft.hitCount; } else { return resultRight.id - resultLeft.id; } }); var searchResultList = ''; resultItems.forEach(function (result) { searchResultList += result.item; }) searchResultList += \"\"; resultContent.innerHTML = searchResultList; } } if ('auto' === 'auto') { input.addEventListener('input', inputEventFunction); } else { $('.search-icon').click(inputEventFunction); input.addEventListener('keypress', function (event) { if (event.keyCode === 13) { inputEventFunction(); } }); } // remove loading animation $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); proceedsearch(); } }); } // handle and trigger popup window; $('.popup-trigger').click(function(e) { e.stopPropagation(); if (isfetched === false) { searchFunc(path, 'local-search-input', 'local-search-result'); } else { proceedsearch(); }; }); $('.popup-btn-close').click(onPopupClose); $('.popup').click(function(e){ e.stopPropagation(); }); $(document).on('keyup', function (event) { var shouldDismissSearchPopup = event.which === 27 && $('.search-popup').is(':visible'); if (shouldDismissSearchPopup) { onPopupClose(); } });","categories":[],"tags":[]},{"title":"","slug":"亲爱的对不起!我又在想你了~/index","date":"2018-07-12T06:20:44.274Z","updated":"2018-07-12T05:14:45.000Z","comments":true,"path":"2018/07/12/亲爱的对不起!我又在想你了~/index/","link":"","permalink":"https://lhldream.top/2018/07/12/亲爱的对不起!我又在想你了~/index/","excerpt":"","text":"var NexT = window.NexT || {}; var CONFIG = { root: '/', scheme: 'Gemini', version: '5.1.4', sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"b2t\":true,\"scrollpercent\":true,\"onmobile\":false}, fancybox: true, tabs: true, motion: {\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}}, duoshuo: { userId: '0', author: 'Author' }, algolia: { applicationID: '', apiKey: '', indexName: '', hits: {\"per_page\":10}, labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"} } }; 亲爱的对不起!我又在想你了~ | 睡醒的兔子 睡醒的兔子 当我们认为自己对这个世界已经相当重要的时候，其实这个世界才刚刚准备原谅我们的幼稚。 Home Categories Archives Tags About photos Search 亲爱的对不起!我又在想你了~ Posted on 2018-07-11 | In 人生 没有机会回味，更没机会后悔，人生竟只有一张单程车票，任何叹息愧疚都无法使岁月的车轮逆转，所以，一切事都赶快做，别去等，有这样一句话：除了死，什么都不宜迟。 不要去等明天，不要去相信永远，你所能做的，就是眼前。你所爱，为尔所为。没有人会等你，在这风雨飘摇的人生路上。你所能做的，就是让自己更快、更强。 生活就像一面镜子。你笑，它便笑；你哭，它也哭。心存善念，便会迎来更多美好的事物。 人生最遗憾的莫过于轻易地放弃了不该放弃的，固执地坚持了不该坚持的。 收拾起心情，继续走吧，错过花，你将收获雨，错过这一个，你才会遇到下一个。 生命是一场幻觉，而你是我的光。 像风一样，淡出你的生命。这样就好。 尝试去把别人拍过来的砖砌成结实的地基，生活就不会那么辛苦了。 人生平静便是福，平静生活，真实而洒脱。生命太短，最没有意义的就是不情愿的重复，所以人生第一要义不是天天幸福，而是不烦，喜怒哀思悲恐惊，酸甜苦辣咸麻涩鲜，都是人生经验。 因为平淡，我们的爱情有时会游离原本温馨的港湾;因为好奇，我们的行程会在某个十字路口不经意的拐弯，就在你意欲转身的刹那，你会听见身后有爱情在低声地哭泣。 欢迎您扫一扫上面的微信公众号，订阅我的博客！ # 七言 关于爱情 情愿得一人心,白首不分离 Candy 不定时分享娱乐内容 14 posts 2 categories 3 tags RSS 0% &copy; 2018 Candy Powered by Hexo | Theme &mdash; NexT.Gemini v5.1.4 本站总访问量 次 | 有人看过我的博客啦 if (Object.prototype.toString.call(window.Promise) !== '[object Function]') { window.Promise = null; } // Popup Window; var isfetched = false; var isXml = true; // Search DB path; var search_path = \"search.xml\"; if (search_path.length === 0) { search_path = \"search.xml\"; } else if (/json$/i.test(search_path)) { isXml = false; } var path = \"/\" + search_path; // monitor main search box; var onPopupClose = function (e) { $('.popup').hide(); $('#local-search-input').val(''); $('.search-result-list').remove(); $('#no-result').remove(); $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); } function proceedsearch() { $(\"body\") .append('') .css('overflow', 'hidden'); $('.search-popup-overlay').click(onPopupClose); $('.popup').toggle(); var $localSearchInput = $('#local-search-input'); $localSearchInput.attr(\"autocapitalize\", \"none\"); $localSearchInput.attr(\"autocorrect\", \"off\"); $localSearchInput.focus(); } // search function; var searchFunc = function(path, search_id, content_id) { 'use strict'; // start loading animation $(\"body\") .append('' + '' + '' + '' + '') .css('overflow', 'hidden'); $(\"#search-loading-icon\").css('margin', '20% auto 0 auto').css('text-align', 'center'); $.ajax({ url: path, dataType: isXml ? \"xml\" : \"json\", async: true, success: function(res) { // get the contents from search data isfetched = true; $('.popup').detach().appendTo('.header-inner'); var datas = isXml ? $(\"entry\", res).map(function() { return { title: $(\"title\", this).text(), content: $(\"content\",this).text(), url: $(\"url\" , this).text() }; }).get() : res; var input = document.getElementById(search_id); var resultContent = document.getElementById(content_id); var inputEventFunction = function() { var searchText = input.value.trim().toLowerCase(); var keywords = searchText.split(/[\\s\\-]+/); if (keywords.length > 1) { keywords.push(searchText); } var resultItems = []; if (searchText.length > 0) { // perform local searching datas.forEach(function(data) { var isMatch = false; var hitCount = 0; var searchTextCount = 0; var title = data.title.trim(); var titleInLowerCase = title.toLowerCase(); var content = data.content.trim().replace(/]+>/g,\"\"); var contentInLowerCase = content.toLowerCase(); var articleUrl = decodeURIComponent(data.url); var indexOfTitle = []; var indexOfContent = []; // only match articles with not empty titles if(title != '') { keywords.forEach(function(keyword) { function getIndexByWord(word, text, caseSensitive) { var wordLen = word.length; if (wordLen === 0) { return []; } var startPosition = 0, position = [], index = []; if (!caseSensitive) { text = text.toLowerCase(); word = word.toLowerCase(); } while ((position = text.indexOf(word, startPosition)) > -1) { index.push({position: position, word: word}); startPosition = position + wordLen; } return index; } indexOfTitle = indexOfTitle.concat(getIndexByWord(keyword, titleInLowerCase, false)); indexOfContent = indexOfContent.concat(getIndexByWord(keyword, contentInLowerCase, false)); }); if (indexOfTitle.length > 0 || indexOfContent.length > 0) { isMatch = true; hitCount = indexOfTitle.length + indexOfContent.length; } } // show search results if (isMatch) { // sort index by position of keyword [indexOfTitle, indexOfContent].forEach(function (index) { index.sort(function (itemLeft, itemRight) { if (itemRight.position !== itemLeft.position) { return itemRight.position - itemLeft.position; } else { return itemLeft.word.length - itemRight.word.length; } }); }); // merge hits into slices function mergeIntoSlice(text, start, end, index) { var item = index[index.length - 1]; var position = item.position; var word = item.word; var hits = []; var searchTextCountInSlice = 0; while (position + word.length position) { index.pop(); } else { break; } } } searchTextCount += searchTextCountInSlice; return { hits: hits, start: start, end: end, searchTextCount: searchTextCountInSlice }; } var slicesOfTitle = []; if (indexOfTitle.length != 0) { slicesOfTitle.push(mergeIntoSlice(title, 0, title.length, indexOfTitle)); } var slicesOfContent = []; while (indexOfContent.length != 0) { var item = indexOfContent[indexOfContent.length - 1]; var position = item.position; var word = item.word; // cut out 100 characters var start = position - 20; var end = position + 80; if(start < 0){ start = 0; } if (end < position + word.length) { end = position + word.length; } if(end > content.length){ end = content.length; } slicesOfContent.push(mergeIntoSlice(content, start, end, indexOfContent)); } // sort slices in content by search text's count and hits' count slicesOfContent.sort(function (sliceLeft, sliceRight) { if (sliceLeft.searchTextCount !== sliceRight.searchTextCount) { return sliceRight.searchTextCount - sliceLeft.searchTextCount; } else if (sliceLeft.hits.length !== sliceRight.hits.length) { return sliceRight.hits.length - sliceLeft.hits.length; } else { return sliceLeft.start - sliceRight.start; } }); // select top N slices in content var upperBound = parseInt('1'); if (upperBound >= 0) { slicesOfContent = slicesOfContent.slice(0, upperBound); } // highlight title and content function highlightKeyword(text, slice) { var result = ''; var prevEnd = slice.start; slice.hits.forEach(function (hit) { result += text.substring(prevEnd, hit.position); var end = hit.position + hit.length; result += '' + text.substring(hit.position, end) + ''; prevEnd = end; }); result += text.substring(prevEnd, slice.end); return result; } var resultItem = ''; if (slicesOfTitle.length != 0) { resultItem += \"\" + highlightKeyword(title, slicesOfTitle[0]) + \"\"; } else { resultItem += \"\" + title + \"\"; } slicesOfContent.forEach(function (slice) { resultItem += \"\" + \"\" + highlightKeyword(content, slice) + \"...\" + \"\"; }); resultItem += \"\"; resultItems.push({ item: resultItem, searchTextCount: searchTextCount, hitCount: hitCount, id: resultItems.length }); } }) }; if (keywords.length === 1 && keywords[0] === \"\") { resultContent.innerHTML = '' } else if (resultItems.length === 0) { resultContent.innerHTML = '' } else { resultItems.sort(function (resultLeft, resultRight) { if (resultLeft.searchTextCount !== resultRight.searchTextCount) { return resultRight.searchTextCount - resultLeft.searchTextCount; } else if (resultLeft.hitCount !== resultRight.hitCount) { return resultRight.hitCount - resultLeft.hitCount; } else { return resultRight.id - resultLeft.id; } }); var searchResultList = ''; resultItems.forEach(function (result) { searchResultList += result.item; }) searchResultList += \"\"; resultContent.innerHTML = searchResultList; } } if ('auto' === 'auto') { input.addEventListener('input', inputEventFunction); } else { $('.search-icon').click(inputEventFunction); input.addEventListener('keypress', function (event) { if (event.keyCode === 13) { inputEventFunction(); } }); } // remove loading animation $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); proceedsearch(); } }); } // handle and trigger popup window; $('.popup-trigger').click(function(e) { e.stopPropagation(); if (isfetched === false) { searchFunc(path, 'local-search-input', 'local-search-result'); } else { proceedsearch(); }; }); $('.popup-btn-close').click(onPopupClose); $('.popup').click(function(e){ e.stopPropagation(); }); $(document).on('keyup', function (event) { var shouldDismissSearchPopup = event.which === 27 && $('.search-popup').is(':visible'); if (shouldDismissSearchPopup) { onPopupClose(); } });","categories":[],"tags":[]},{"title":"","slug":"没有到不了的明天/index","date":"2018-07-12T06:20:43.808Z","updated":"2018-07-12T05:14:45.000Z","comments":true,"path":"2018/07/12/没有到不了的明天/index/","link":"","permalink":"https://lhldream.top/2018/07/12/没有到不了的明天/index/","excerpt":"","text":"var NexT = window.NexT || {}; var CONFIG = { root: '/', scheme: 'Gemini', version: '5.1.4', sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"b2t\":true,\"scrollpercent\":true,\"onmobile\":false}, fancybox: true, tabs: true, motion: {\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}}, duoshuo: { userId: '0', author: 'Author' }, algolia: { applicationID: '', apiKey: '', indexName: '', hits: {\"per_page\":10}, labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"} } }; 没有到不了的明天 | 睡醒的兔子 睡醒的兔子 当我们认为自己对这个世界已经相当重要的时候，其实这个世界才刚刚准备原谅我们的幼稚。 Home Categories Archives Tags About photos Search 没有到不了的明天 Posted on 2018-07-11 | In 人生 人生需要有拿得起的魄力，更需要放得下的勇气！因为拿得起是一种能力，放得下却是一种智慧。拿得起的是生存，放得下的生活！ 世间最大的抱憾，是我们近在咫尺，却不懂彼此的沉默；最大的错失，是明知前方无路，却固执得不想转弯。 过去的请把它忘记，放下追逐，清风就会来！你放开眉头，世界就会快乐！菩提本无树，明镜亦非台，本来无一物，何处惹尘埃！ 坦然面对世事，提起来千斤重，放得下二两轻。知从容：潇洒驰骋人生，事从容有余味，人从容有余年。学会放下，人生才精彩。 学会放下，懂得从容。人生在世，难免会遇到很多不如意，生活中出现不顺心的事情，不要心怀不满、怨气冲天，也不必耿耿于怀、一蹶不振，是福是祸都得面对，是好是坏都会过去。 不要在意别人在背后怎么看你说你，因为这些言语改变不了事实，却可能搅乱你的心。心如果乱了，一切就都乱了。理解你的人，不需要解释；不理解你的人，不用你解释。因为日久不一定生情，但一定见人心。 给自己一片没有退路的悬崖，就是给自己一个向生命高地冲锋的机会。清清楚楚看昨天，扎扎实实抓今天，高高兴兴看明天。向昨天要经验，向明天要动力，向今天要成果。记住昨天，思索明天，善待今天！ 人生像是一篇文章，离不开各式的标点。成长不是一路一路获得，乐观的人，他不管遇到什么困难，什么苦楚，什么意外，从不悲观，从不灰心，从不失志，总是顽强地在逆境中拼搏，在坎坷中迈进。总是坦坦然然，快快乐乐地历经人生的里程。 当一个人有了强烈的想要改变自我的意愿，或者逐渐的变的好起来之后，便会不自觉的对周围的一切产生要求。个人力量是有限的，只有实现了资源的优化组合，与志同道合者合作，才能实现仅凭自己无法达成的愿望。 跌倒的时候，要能认识障碍，勇敢站起；失意的时候，要能自我检讨，再次出发；困难的时候，要能冷静分析，寻找突破；彷徨的时候，要能看清目标，不变方向。 欢迎您扫一扫上面的微信公众号，订阅我的博客！ # 七言 晚安,好梦 关于爱情 Candy 不定时分享娱乐内容 14 posts 2 categories 3 tags RSS 0% &copy; 2018 Candy Powered by Hexo | Theme &mdash; NexT.Gemini v5.1.4 本站总访问量 次 | 有人看过我的博客啦 if (Object.prototype.toString.call(window.Promise) !== '[object Function]') { window.Promise = null; } // Popup Window; var isfetched = false; var isXml = true; // Search DB path; var search_path = \"search.xml\"; if (search_path.length === 0) { search_path = \"search.xml\"; } else if (/json$/i.test(search_path)) { isXml = false; } var path = \"/\" + search_path; // monitor main search box; var onPopupClose = function (e) { $('.popup').hide(); $('#local-search-input').val(''); $('.search-result-list').remove(); $('#no-result').remove(); $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); } function proceedsearch() { $(\"body\") .append('') .css('overflow', 'hidden'); $('.search-popup-overlay').click(onPopupClose); $('.popup').toggle(); var $localSearchInput = $('#local-search-input'); $localSearchInput.attr(\"autocapitalize\", \"none\"); $localSearchInput.attr(\"autocorrect\", \"off\"); $localSearchInput.focus(); } // search function; var searchFunc = function(path, search_id, content_id) { 'use strict'; // start loading animation $(\"body\") .append('' + '' + '' + '' + '') .css('overflow', 'hidden'); $(\"#search-loading-icon\").css('margin', '20% auto 0 auto').css('text-align', 'center'); $.ajax({ url: path, dataType: isXml ? \"xml\" : \"json\", async: true, success: function(res) { // get the contents from search data isfetched = true; $('.popup').detach().appendTo('.header-inner'); var datas = isXml ? $(\"entry\", res).map(function() { return { title: $(\"title\", this).text(), content: $(\"content\",this).text(), url: $(\"url\" , this).text() }; }).get() : res; var input = document.getElementById(search_id); var resultContent = document.getElementById(content_id); var inputEventFunction = function() { var searchText = input.value.trim().toLowerCase(); var keywords = searchText.split(/[\\s\\-]+/); if (keywords.length > 1) { keywords.push(searchText); } var resultItems = []; if (searchText.length > 0) { // perform local searching datas.forEach(function(data) { var isMatch = false; var hitCount = 0; var searchTextCount = 0; var title = data.title.trim(); var titleInLowerCase = title.toLowerCase(); var content = data.content.trim().replace(/]+>/g,\"\"); var contentInLowerCase = content.toLowerCase(); var articleUrl = decodeURIComponent(data.url); var indexOfTitle = []; var indexOfContent = []; // only match articles with not empty titles if(title != '') { keywords.forEach(function(keyword) { function getIndexByWord(word, text, caseSensitive) { var wordLen = word.length; if (wordLen === 0) { return []; } var startPosition = 0, position = [], index = []; if (!caseSensitive) { text = text.toLowerCase(); word = word.toLowerCase(); } while ((position = text.indexOf(word, startPosition)) > -1) { index.push({position: position, word: word}); startPosition = position + wordLen; } return index; } indexOfTitle = indexOfTitle.concat(getIndexByWord(keyword, titleInLowerCase, false)); indexOfContent = indexOfContent.concat(getIndexByWord(keyword, contentInLowerCase, false)); }); if (indexOfTitle.length > 0 || indexOfContent.length > 0) { isMatch = true; hitCount = indexOfTitle.length + indexOfContent.length; } } // show search results if (isMatch) { // sort index by position of keyword [indexOfTitle, indexOfContent].forEach(function (index) { index.sort(function (itemLeft, itemRight) { if (itemRight.position !== itemLeft.position) { return itemRight.position - itemLeft.position; } else { return itemLeft.word.length - itemRight.word.length; } }); }); // merge hits into slices function mergeIntoSlice(text, start, end, index) { var item = index[index.length - 1]; var position = item.position; var word = item.word; var hits = []; var searchTextCountInSlice = 0; while (position + word.length position) { index.pop(); } else { break; } } } searchTextCount += searchTextCountInSlice; return { hits: hits, start: start, end: end, searchTextCount: searchTextCountInSlice }; } var slicesOfTitle = []; if (indexOfTitle.length != 0) { slicesOfTitle.push(mergeIntoSlice(title, 0, title.length, indexOfTitle)); } var slicesOfContent = []; while (indexOfContent.length != 0) { var item = indexOfContent[indexOfContent.length - 1]; var position = item.position; var word = item.word; // cut out 100 characters var start = position - 20; var end = position + 80; if(start < 0){ start = 0; } if (end < position + word.length) { end = position + word.length; } if(end > content.length){ end = content.length; } slicesOfContent.push(mergeIntoSlice(content, start, end, indexOfContent)); } // sort slices in content by search text's count and hits' count slicesOfContent.sort(function (sliceLeft, sliceRight) { if (sliceLeft.searchTextCount !== sliceRight.searchTextCount) { return sliceRight.searchTextCount - sliceLeft.searchTextCount; } else if (sliceLeft.hits.length !== sliceRight.hits.length) { return sliceRight.hits.length - sliceLeft.hits.length; } else { return sliceLeft.start - sliceRight.start; } }); // select top N slices in content var upperBound = parseInt('1'); if (upperBound >= 0) { slicesOfContent = slicesOfContent.slice(0, upperBound); } // highlight title and content function highlightKeyword(text, slice) { var result = ''; var prevEnd = slice.start; slice.hits.forEach(function (hit) { result += text.substring(prevEnd, hit.position); var end = hit.position + hit.length; result += '' + text.substring(hit.position, end) + ''; prevEnd = end; }); result += text.substring(prevEnd, slice.end); return result; } var resultItem = ''; if (slicesOfTitle.length != 0) { resultItem += \"\" + highlightKeyword(title, slicesOfTitle[0]) + \"\"; } else { resultItem += \"\" + title + \"\"; } slicesOfContent.forEach(function (slice) { resultItem += \"\" + \"\" + highlightKeyword(content, slice) + \"...\" + \"\"; }); resultItem += \"\"; resultItems.push({ item: resultItem, searchTextCount: searchTextCount, hitCount: hitCount, id: resultItems.length }); } }) }; if (keywords.length === 1 && keywords[0] === \"\") { resultContent.innerHTML = '' } else if (resultItems.length === 0) { resultContent.innerHTML = '' } else { resultItems.sort(function (resultLeft, resultRight) { if (resultLeft.searchTextCount !== resultRight.searchTextCount) { return resultRight.searchTextCount - resultLeft.searchTextCount; } else if (resultLeft.hitCount !== resultRight.hitCount) { return resultRight.hitCount - resultLeft.hitCount; } else { return resultRight.id - resultLeft.id; } }); var searchResultList = ''; resultItems.forEach(function (result) { searchResultList += result.item; }) searchResultList += \"\"; resultContent.innerHTML = searchResultList; } } if ('auto' === 'auto') { input.addEventListener('input', inputEventFunction); } else { $('.search-icon').click(inputEventFunction); input.addEventListener('keypress', function (event) { if (event.keyCode === 13) { inputEventFunction(); } }); } // remove loading animation $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); proceedsearch(); } }); } // handle and trigger popup window; $('.popup-trigger').click(function(e) { e.stopPropagation(); if (isfetched === false) { searchFunc(path, 'local-search-input', 'local-search-result'); } else { proceedsearch(); }; }); $('.popup-btn-close').click(onPopupClose); $('.popup').click(function(e){ e.stopPropagation(); }); $(document).on('keyup', function (event) { var shouldDismissSearchPopup = event.which === 27 && $('.search-popup').is(':visible'); if (shouldDismissSearchPopup) { onPopupClose(); } });","categories":[],"tags":[]},{"title":"","slug":"关于爱情/index","date":"2018-07-12T06:20:43.275Z","updated":"2018-07-12T05:14:45.000Z","comments":true,"path":"2018/07/12/关于爱情/index/","link":"","permalink":"https://lhldream.top/2018/07/12/关于爱情/index/","excerpt":"","text":"var NexT = window.NexT || {}; var CONFIG = { root: '/', scheme: 'Gemini', version: '5.1.4', sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"b2t\":true,\"scrollpercent\":true,\"onmobile\":false}, fancybox: true, tabs: true, motion: {\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}}, duoshuo: { userId: '0', author: 'Author' }, algolia: { applicationID: '', apiKey: '', indexName: '', hits: {\"per_page\":10}, labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"} } }; 关于爱情 | 睡醒的兔子 睡醒的兔子 当我们认为自己对这个世界已经相当重要的时候，其实这个世界才刚刚准备原谅我们的幼稚。 Home Categories Archives Tags About photos Search 关于爱情 Posted on 2018-07-11 | In 人生 希望以后的日子里，有人给你波澜不惊的爱情，有人陪你看细水长流的风景。 假如这一生我有99次好运，我愿意把96次都分给你，只留三次给自己。一次是遇见你，一次是我爱的你也恰好爱上我，一次是永远陪你走下去。 月亮极亮，云也十分温柔，所有对你的想念，都落入温软的呼吸里。 人的一生会遇到两个人，一个惊艳了时光，一个温柔了岁月。 记忆像是倒在掌心的水，不论你摊开还是紧握，终究还是会从指缝中，一滴一滴，流淌干净。 时间是奇妙的化学物质。可以抹平忧伤，可以抛下快乐，可以淡漠成长，可以见证生死。 有些事，过去了也就忘了。有些事，过不去也忘不了。忘不了，不是过不去，是过去了，也忘不了。 过自己想要的生活，上帝会让你付出代价。照顾好自己，爱自己才能爱好别人。如果你压抑，痛苦，忧伤，不自由，又怎么可能在心里腾出温暖的房间，让重要的人住在里面。如果一颗心千疮百孔，住在里面的人就会被雨水打湿。 一个人的小巷，有薄暮夕阳的浪漫，拾起阡陌边的稻草，放进嘴里嚼。一个人的海洋，有碧海蓝天的忧伤 ，踢着悠悠浮动的水草，让心洋轻轻荡。一个人的小街，有落雨缤纷的凄美，打着同样缤纷的伞，看电影散场的人，游走在纷扰的边缘。 时间是奇妙的化学物质。可以抹平忧伤，可以抛下快乐，可以淡漠成长，可以见证生死。 欢迎您扫一扫上面的微信公众号，订阅我的博客！ # 七言 没有到不了的明天 亲爱的对不起!我又在想你了~ Candy 不定时分享娱乐内容 14 posts 2 categories 3 tags RSS 0% &copy; 2018 Candy Powered by Hexo | Theme &mdash; NexT.Gemini v5.1.4 本站总访问量 次 | 有人看过我的博客啦 if (Object.prototype.toString.call(window.Promise) !== '[object Function]') { window.Promise = null; } // Popup Window; var isfetched = false; var isXml = true; // Search DB path; var search_path = \"search.xml\"; if (search_path.length === 0) { search_path = \"search.xml\"; } else if (/json$/i.test(search_path)) { isXml = false; } var path = \"/\" + search_path; // monitor main search box; var onPopupClose = function (e) { $('.popup').hide(); $('#local-search-input').val(''); $('.search-result-list').remove(); $('#no-result').remove(); $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); } function proceedsearch() { $(\"body\") .append('') .css('overflow', 'hidden'); $('.search-popup-overlay').click(onPopupClose); $('.popup').toggle(); var $localSearchInput = $('#local-search-input'); $localSearchInput.attr(\"autocapitalize\", \"none\"); $localSearchInput.attr(\"autocorrect\", \"off\"); $localSearchInput.focus(); } // search function; var searchFunc = function(path, search_id, content_id) { 'use strict'; // start loading animation $(\"body\") .append('' + '' + '' + '' + '') .css('overflow', 'hidden'); $(\"#search-loading-icon\").css('margin', '20% auto 0 auto').css('text-align', 'center'); $.ajax({ url: path, dataType: isXml ? \"xml\" : \"json\", async: true, success: function(res) { // get the contents from search data isfetched = true; $('.popup').detach().appendTo('.header-inner'); var datas = isXml ? $(\"entry\", res).map(function() { return { title: $(\"title\", this).text(), content: $(\"content\",this).text(), url: $(\"url\" , this).text() }; }).get() : res; var input = document.getElementById(search_id); var resultContent = document.getElementById(content_id); var inputEventFunction = function() { var searchText = input.value.trim().toLowerCase(); var keywords = searchText.split(/[\\s\\-]+/); if (keywords.length > 1) { keywords.push(searchText); } var resultItems = []; if (searchText.length > 0) { // perform local searching datas.forEach(function(data) { var isMatch = false; var hitCount = 0; var searchTextCount = 0; var title = data.title.trim(); var titleInLowerCase = title.toLowerCase(); var content = data.content.trim().replace(/]+>/g,\"\"); var contentInLowerCase = content.toLowerCase(); var articleUrl = decodeURIComponent(data.url); var indexOfTitle = []; var indexOfContent = []; // only match articles with not empty titles if(title != '') { keywords.forEach(function(keyword) { function getIndexByWord(word, text, caseSensitive) { var wordLen = word.length; if (wordLen === 0) { return []; } var startPosition = 0, position = [], index = []; if (!caseSensitive) { text = text.toLowerCase(); word = word.toLowerCase(); } while ((position = text.indexOf(word, startPosition)) > -1) { index.push({position: position, word: word}); startPosition = position + wordLen; } return index; } indexOfTitle = indexOfTitle.concat(getIndexByWord(keyword, titleInLowerCase, false)); indexOfContent = indexOfContent.concat(getIndexByWord(keyword, contentInLowerCase, false)); }); if (indexOfTitle.length > 0 || indexOfContent.length > 0) { isMatch = true; hitCount = indexOfTitle.length + indexOfContent.length; } } // show search results if (isMatch) { // sort index by position of keyword [indexOfTitle, indexOfContent].forEach(function (index) { index.sort(function (itemLeft, itemRight) { if (itemRight.position !== itemLeft.position) { return itemRight.position - itemLeft.position; } else { return itemLeft.word.length - itemRight.word.length; } }); }); // merge hits into slices function mergeIntoSlice(text, start, end, index) { var item = index[index.length - 1]; var position = item.position; var word = item.word; var hits = []; var searchTextCountInSlice = 0; while (position + word.length position) { index.pop(); } else { break; } } } searchTextCount += searchTextCountInSlice; return { hits: hits, start: start, end: end, searchTextCount: searchTextCountInSlice }; } var slicesOfTitle = []; if (indexOfTitle.length != 0) { slicesOfTitle.push(mergeIntoSlice(title, 0, title.length, indexOfTitle)); } var slicesOfContent = []; while (indexOfContent.length != 0) { var item = indexOfContent[indexOfContent.length - 1]; var position = item.position; var word = item.word; // cut out 100 characters var start = position - 20; var end = position + 80; if(start < 0){ start = 0; } if (end < position + word.length) { end = position + word.length; } if(end > content.length){ end = content.length; } slicesOfContent.push(mergeIntoSlice(content, start, end, indexOfContent)); } // sort slices in content by search text's count and hits' count slicesOfContent.sort(function (sliceLeft, sliceRight) { if (sliceLeft.searchTextCount !== sliceRight.searchTextCount) { return sliceRight.searchTextCount - sliceLeft.searchTextCount; } else if (sliceLeft.hits.length !== sliceRight.hits.length) { return sliceRight.hits.length - sliceLeft.hits.length; } else { return sliceLeft.start - sliceRight.start; } }); // select top N slices in content var upperBound = parseInt('1'); if (upperBound >= 0) { slicesOfContent = slicesOfContent.slice(0, upperBound); } // highlight title and content function highlightKeyword(text, slice) { var result = ''; var prevEnd = slice.start; slice.hits.forEach(function (hit) { result += text.substring(prevEnd, hit.position); var end = hit.position + hit.length; result += '' + text.substring(hit.position, end) + ''; prevEnd = end; }); result += text.substring(prevEnd, slice.end); return result; } var resultItem = ''; if (slicesOfTitle.length != 0) { resultItem += \"\" + highlightKeyword(title, slicesOfTitle[0]) + \"\"; } else { resultItem += \"\" + title + \"\"; } slicesOfContent.forEach(function (slice) { resultItem += \"\" + \"\" + highlightKeyword(content, slice) + \"...\" + \"\"; }); resultItem += \"\"; resultItems.push({ item: resultItem, searchTextCount: searchTextCount, hitCount: hitCount, id: resultItems.length }); } }) }; if (keywords.length === 1 && keywords[0] === \"\") { resultContent.innerHTML = '' } else if (resultItems.length === 0) { resultContent.innerHTML = '' } else { resultItems.sort(function (resultLeft, resultRight) { if (resultLeft.searchTextCount !== resultRight.searchTextCount) { return resultRight.searchTextCount - resultLeft.searchTextCount; } else if (resultLeft.hitCount !== resultRight.hitCount) { return resultRight.hitCount - resultLeft.hitCount; } else { return resultRight.id - resultLeft.id; } }); var searchResultList = ''; resultItems.forEach(function (result) { searchResultList += result.item; }) searchResultList += \"\"; resultContent.innerHTML = searchResultList; } } if ('auto' === 'auto') { input.addEventListener('input', inputEventFunction); } else { $('.search-icon').click(inputEventFunction); input.addEventListener('keypress', function (event) { if (event.keyCode === 13) { inputEventFunction(); } }); } // remove loading animation $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); proceedsearch(); } }); } // handle and trigger popup window; $('.popup-trigger').click(function(e) { e.stopPropagation(); if (isfetched === false) { searchFunc(path, 'local-search-input', 'local-search-result'); } else { proceedsearch(); }; }); $('.popup-btn-close').click(onPopupClose); $('.popup').click(function(e){ e.stopPropagation(); }); $(document).on('keyup', function (event) { var shouldDismissSearchPopup = event.which === 27 && $('.search-popup').is(':visible'); if (shouldDismissSearchPopup) { onPopupClose(); } });","categories":[],"tags":[]},{"title":"","slug":"逗比老爸的逗比日常/index","date":"2018-07-12T06:20:42.815Z","updated":"2018-07-12T05:14:45.000Z","comments":true,"path":"2018/07/12/逗比老爸的逗比日常/index/","link":"","permalink":"https://lhldream.top/2018/07/12/逗比老爸的逗比日常/index/","excerpt":"","text":"var NexT = window.NexT || {}; var CONFIG = { root: '/', scheme: 'Gemini', version: '5.1.4', sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"b2t\":true,\"scrollpercent\":true,\"onmobile\":false}, fancybox: true, tabs: true, motion: {\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}}, duoshuo: { userId: '0', author: 'Author' }, algolia: { applicationID: '', apiKey: '', indexName: '', hits: {\"per_page\":10}, labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"} } }; 逗比老爸的逗比日常 | 睡醒的兔子 睡醒的兔子 当我们认为自己对这个世界已经相当重要的时候，其实这个世界才刚刚准备原谅我们的幼稚。 Home Categories Archives Tags About photos Search 逗比老爸的逗比日常 Posted on 2018-07-11 | In 娱乐 欢迎您扫一扫上面的微信公众号，订阅我的博客！ # 搞笑 电影网站推荐 珍惜生活 Candy 不定时分享娱乐内容 14 posts 2 categories 3 tags RSS 0% &copy; 2018 Candy Powered by Hexo | Theme &mdash; NexT.Gemini v5.1.4 本站总访问量 次 | 有人看过我的博客啦 if (Object.prototype.toString.call(window.Promise) !== '[object Function]') { window.Promise = null; } // Popup Window; var isfetched = false; var isXml = true; // Search DB path; var search_path = \"search.xml\"; if (search_path.length === 0) { search_path = \"search.xml\"; } else if (/json$/i.test(search_path)) { isXml = false; } var path = \"/\" + search_path; // monitor main search box; var onPopupClose = function (e) { $('.popup').hide(); $('#local-search-input').val(''); $('.search-result-list').remove(); $('#no-result').remove(); $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); } function proceedsearch() { $(\"body\") .append('') .css('overflow', 'hidden'); $('.search-popup-overlay').click(onPopupClose); $('.popup').toggle(); var $localSearchInput = $('#local-search-input'); $localSearchInput.attr(\"autocapitalize\", \"none\"); $localSearchInput.attr(\"autocorrect\", \"off\"); $localSearchInput.focus(); } // search function; var searchFunc = function(path, search_id, content_id) { 'use strict'; // start loading animation $(\"body\") .append('' + '' + '' + '' + '') .css('overflow', 'hidden'); $(\"#search-loading-icon\").css('margin', '20% auto 0 auto').css('text-align', 'center'); $.ajax({ url: path, dataType: isXml ? \"xml\" : \"json\", async: true, success: function(res) { // get the contents from search data isfetched = true; $('.popup').detach().appendTo('.header-inner'); var datas = isXml ? $(\"entry\", res).map(function() { return { title: $(\"title\", this).text(), content: $(\"content\",this).text(), url: $(\"url\" , this).text() }; }).get() : res; var input = document.getElementById(search_id); var resultContent = document.getElementById(content_id); var inputEventFunction = function() { var searchText = input.value.trim().toLowerCase(); var keywords = searchText.split(/[\\s\\-]+/); if (keywords.length > 1) { keywords.push(searchText); } var resultItems = []; if (searchText.length > 0) { // perform local searching datas.forEach(function(data) { var isMatch = false; var hitCount = 0; var searchTextCount = 0; var title = data.title.trim(); var titleInLowerCase = title.toLowerCase(); var content = data.content.trim().replace(/]+>/g,\"\"); var contentInLowerCase = content.toLowerCase(); var articleUrl = decodeURIComponent(data.url); var indexOfTitle = []; var indexOfContent = []; // only match articles with not empty titles if(title != '') { keywords.forEach(function(keyword) { function getIndexByWord(word, text, caseSensitive) { var wordLen = word.length; if (wordLen === 0) { return []; } var startPosition = 0, position = [], index = []; if (!caseSensitive) { text = text.toLowerCase(); word = word.toLowerCase(); } while ((position = text.indexOf(word, startPosition)) > -1) { index.push({position: position, word: word}); startPosition = position + wordLen; } return index; } indexOfTitle = indexOfTitle.concat(getIndexByWord(keyword, titleInLowerCase, false)); indexOfContent = indexOfContent.concat(getIndexByWord(keyword, contentInLowerCase, false)); }); if (indexOfTitle.length > 0 || indexOfContent.length > 0) { isMatch = true; hitCount = indexOfTitle.length + indexOfContent.length; } } // show search results if (isMatch) { // sort index by position of keyword [indexOfTitle, indexOfContent].forEach(function (index) { index.sort(function (itemLeft, itemRight) { if (itemRight.position !== itemLeft.position) { return itemRight.position - itemLeft.position; } else { return itemLeft.word.length - itemRight.word.length; } }); }); // merge hits into slices function mergeIntoSlice(text, start, end, index) { var item = index[index.length - 1]; var position = item.position; var word = item.word; var hits = []; var searchTextCountInSlice = 0; while (position + word.length position) { index.pop(); } else { break; } } } searchTextCount += searchTextCountInSlice; return { hits: hits, start: start, end: end, searchTextCount: searchTextCountInSlice }; } var slicesOfTitle = []; if (indexOfTitle.length != 0) { slicesOfTitle.push(mergeIntoSlice(title, 0, title.length, indexOfTitle)); } var slicesOfContent = []; while (indexOfContent.length != 0) { var item = indexOfContent[indexOfContent.length - 1]; var position = item.position; var word = item.word; // cut out 100 characters var start = position - 20; var end = position + 80; if(start < 0){ start = 0; } if (end < position + word.length) { end = position + word.length; } if(end > content.length){ end = content.length; } slicesOfContent.push(mergeIntoSlice(content, start, end, indexOfContent)); } // sort slices in content by search text's count and hits' count slicesOfContent.sort(function (sliceLeft, sliceRight) { if (sliceLeft.searchTextCount !== sliceRight.searchTextCount) { return sliceRight.searchTextCount - sliceLeft.searchTextCount; } else if (sliceLeft.hits.length !== sliceRight.hits.length) { return sliceRight.hits.length - sliceLeft.hits.length; } else { return sliceLeft.start - sliceRight.start; } }); // select top N slices in content var upperBound = parseInt('1'); if (upperBound >= 0) { slicesOfContent = slicesOfContent.slice(0, upperBound); } // highlight title and content function highlightKeyword(text, slice) { var result = ''; var prevEnd = slice.start; slice.hits.forEach(function (hit) { result += text.substring(prevEnd, hit.position); var end = hit.position + hit.length; result += '' + text.substring(hit.position, end) + ''; prevEnd = end; }); result += text.substring(prevEnd, slice.end); return result; } var resultItem = ''; if (slicesOfTitle.length != 0) { resultItem += \"\" + highlightKeyword(title, slicesOfTitle[0]) + \"\"; } else { resultItem += \"\" + title + \"\"; } slicesOfContent.forEach(function (slice) { resultItem += \"\" + \"\" + highlightKeyword(content, slice) + \"...\" + \"\"; }); resultItem += \"\"; resultItems.push({ item: resultItem, searchTextCount: searchTextCount, hitCount: hitCount, id: resultItems.length }); } }) }; if (keywords.length === 1 && keywords[0] === \"\") { resultContent.innerHTML = '' } else if (resultItems.length === 0) { resultContent.innerHTML = '' } else { resultItems.sort(function (resultLeft, resultRight) { if (resultLeft.searchTextCount !== resultRight.searchTextCount) { return resultRight.searchTextCount - resultLeft.searchTextCount; } else if (resultLeft.hitCount !== resultRight.hitCount) { return resultRight.hitCount - resultLeft.hitCount; } else { return resultRight.id - resultLeft.id; } }); var searchResultList = ''; resultItems.forEach(function (result) { searchResultList += result.item; }) searchResultList += \"\"; resultContent.innerHTML = searchResultList; } } if ('auto' === 'auto') { input.addEventListener('input', inputEventFunction); } else { $('.search-icon').click(inputEventFunction); input.addEventListener('keypress', function (event) { if (event.keyCode === 13) { inputEventFunction(); } }); } // remove loading animation $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); proceedsearch(); } }); } // handle and trigger popup window; $('.popup-trigger').click(function(e) { e.stopPropagation(); if (isfetched === false) { searchFunc(path, 'local-search-input', 'local-search-result'); } else { proceedsearch(); }; }); $('.popup-btn-close').click(onPopupClose); $('.popup').click(function(e){ e.stopPropagation(); }); $(document).on('keyup', function (event) { var shouldDismissSearchPopup = event.which === 27 && $('.search-popup').is(':visible'); if (shouldDismissSearchPopup) { onPopupClose(); } });","categories":[],"tags":[]},{"title":"","slug":"漫步人生路/index","date":"2018-07-12T06:20:37.277Z","updated":"2018-07-12T05:14:45.000Z","comments":true,"path":"2018/07/12/漫步人生路/index/","link":"","permalink":"https://lhldream.top/2018/07/12/漫步人生路/index/","excerpt":"","text":"var NexT = window.NexT || {}; var CONFIG = { root: '/', scheme: 'Gemini', version: '5.1.4', sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"b2t\":true,\"scrollpercent\":true,\"onmobile\":false}, fancybox: true, tabs: true, motion: {\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}}, duoshuo: { userId: '0', author: 'Author' }, algolia: { applicationID: '', apiKey: '', indexName: '', hits: {\"per_page\":10}, labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"} } }; 漫步人生路 | 睡醒的兔子 睡醒的兔子 当我们认为自己对这个世界已经相当重要的时候，其实这个世界才刚刚准备原谅我们的幼稚。 Home Categories Archives Tags About photos Search 漫步人生路 Posted on 2018-07-12 | In 人生 所谓的坚强，无非是该听的话能听见，不该听的只当听不见，该想的事情想，不该想的忘掉。 现在才明白，要赚到足够令自己安心的钱，才能过上简单、安逸、自由的生活，才能让自己活得更有底气。所以，多花时间努力，少点功夫矫情。不要因为一时的心烦，做出一辈子的傻事。 以宽容之心对待别人，以豁达之心微笑面对生活。心情，是一种感情状态，拥有了好心情，也就拥有了自信，继而拥有了年轻和健康。就拥有了对未来生活的向往，充满期待，让我们拥有一份好心情吧，因为生活着就是幸运和快乐。 不要把自己活得像落难者一样，急着告诉所有人你的不幸。总有一天你会发现，酸甜苦辣要自己尝，漫漫人生要自己过，你所经历的在别人眼里都是故事，也别把所有的事都掏心掏肺的告诉别人，落单的恋人最怕过节，成长本来就是一个孤立无援的过程，你要努力强大起来，然后独当一面。 闭上眼睛，安静内心告诉自己。别人想什么，我们控制不了；别人做什么，我们也强求不了。唯一可以做的，就是尽心尽力做好自己的事，走自己的路，按自己的原则，好好生活。即使有人亏待了你，时间也不会亏待你，人生更加不会亏待你。 到了现在这个年纪，谁都不想再取悦了，跟谁在一起舒服就和谁在一起，包括朋友也是，累了就躲远一点。取悦别人远不如快乐自己。宁可孤独，也不违心。宁可抱憾，也不将就。 所谓坚持，不是四处寻求安慰后的坚持，不是被人说服后的坚持。而是无论如何，牙碎自己吞，流泪自己擦，摔了站起来继续走。真正的坚持，和别人永远发生不了关系，全靠自己每日擦拭。不要逢人便说：请鼓励我，我会坚持下去的。那不是坚持，是乞讨。 我们感到迷茫和困惑，是因为我们没有找到行为的价值。用一种信仰的精神、一种好的思想观念来照亮自己的内心，才能走出这个泥潭。人生的许多困惑、问题，都是缺乏正确的知见造成的。 人不论是面对快乐与幸福，还是痛苦与挫折，都不能沉迷其中，以致于最终毁灭了自己。人生没有永远的痛苦，也没有永远的快乐，坦然平和地去面对一切，这才是一个真正的强者。 人生一定要努力，努力是人生的一种精神状态。与其要求自己一定要成为一个什么样的人物，获得什么样的成就，不如磨练自己做一个努力的人。只有努力了才可能拥有，就算最终没能实现梦想也不会有太多的遗憾。往往最美的不是成功的那一刻，而是那段努力奋斗的过程。 欢迎您扫一扫上面的微信公众号，订阅我的博客！ # 七言 时光旅行者 Candy 不定时分享娱乐内容 14 posts 2 categories 3 tags RSS 0% &copy; 2018 Candy Powered by Hexo | Theme &mdash; NexT.Gemini v5.1.4 本站总访问量 次 | 有人看过我的博客啦 if (Object.prototype.toString.call(window.Promise) !== '[object Function]') { window.Promise = null; } // Popup Window; var isfetched = false; var isXml = true; // Search DB path; var search_path = \"search.xml\"; if (search_path.length === 0) { search_path = \"search.xml\"; } else if (/json$/i.test(search_path)) { isXml = false; } var path = \"/\" + search_path; // monitor main search box; var onPopupClose = function (e) { $('.popup').hide(); $('#local-search-input').val(''); $('.search-result-list').remove(); $('#no-result').remove(); $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); } function proceedsearch() { $(\"body\") .append('') .css('overflow', 'hidden'); $('.search-popup-overlay').click(onPopupClose); $('.popup').toggle(); var $localSearchInput = $('#local-search-input'); $localSearchInput.attr(\"autocapitalize\", \"none\"); $localSearchInput.attr(\"autocorrect\", \"off\"); $localSearchInput.focus(); } // search function; var searchFunc = function(path, search_id, content_id) { 'use strict'; // start loading animation $(\"body\") .append('' + '' + '' + '' + '') .css('overflow', 'hidden'); $(\"#search-loading-icon\").css('margin', '20% auto 0 auto').css('text-align', 'center'); $.ajax({ url: path, dataType: isXml ? \"xml\" : \"json\", async: true, success: function(res) { // get the contents from search data isfetched = true; $('.popup').detach().appendTo('.header-inner'); var datas = isXml ? $(\"entry\", res).map(function() { return { title: $(\"title\", this).text(), content: $(\"content\",this).text(), url: $(\"url\" , this).text() }; }).get() : res; var input = document.getElementById(search_id); var resultContent = document.getElementById(content_id); var inputEventFunction = function() { var searchText = input.value.trim().toLowerCase(); var keywords = searchText.split(/[\\s\\-]+/); if (keywords.length > 1) { keywords.push(searchText); } var resultItems = []; if (searchText.length > 0) { // perform local searching datas.forEach(function(data) { var isMatch = false; var hitCount = 0; var searchTextCount = 0; var title = data.title.trim(); var titleInLowerCase = title.toLowerCase(); var content = data.content.trim().replace(/]+>/g,\"\"); var contentInLowerCase = content.toLowerCase(); var articleUrl = decodeURIComponent(data.url); var indexOfTitle = []; var indexOfContent = []; // only match articles with not empty titles if(title != '') { keywords.forEach(function(keyword) { function getIndexByWord(word, text, caseSensitive) { var wordLen = word.length; if (wordLen === 0) { return []; } var startPosition = 0, position = [], index = []; if (!caseSensitive) { text = text.toLowerCase(); word = word.toLowerCase(); } while ((position = text.indexOf(word, startPosition)) > -1) { index.push({position: position, word: word}); startPosition = position + wordLen; } return index; } indexOfTitle = indexOfTitle.concat(getIndexByWord(keyword, titleInLowerCase, false)); indexOfContent = indexOfContent.concat(getIndexByWord(keyword, contentInLowerCase, false)); }); if (indexOfTitle.length > 0 || indexOfContent.length > 0) { isMatch = true; hitCount = indexOfTitle.length + indexOfContent.length; } } // show search results if (isMatch) { // sort index by position of keyword [indexOfTitle, indexOfContent].forEach(function (index) { index.sort(function (itemLeft, itemRight) { if (itemRight.position !== itemLeft.position) { return itemRight.position - itemLeft.position; } else { return itemLeft.word.length - itemRight.word.length; } }); }); // merge hits into slices function mergeIntoSlice(text, start, end, index) { var item = index[index.length - 1]; var position = item.position; var word = item.word; var hits = []; var searchTextCountInSlice = 0; while (position + word.length position) { index.pop(); } else { break; } } } searchTextCount += searchTextCountInSlice; return { hits: hits, start: start, end: end, searchTextCount: searchTextCountInSlice }; } var slicesOfTitle = []; if (indexOfTitle.length != 0) { slicesOfTitle.push(mergeIntoSlice(title, 0, title.length, indexOfTitle)); } var slicesOfContent = []; while (indexOfContent.length != 0) { var item = indexOfContent[indexOfContent.length - 1]; var position = item.position; var word = item.word; // cut out 100 characters var start = position - 20; var end = position + 80; if(start < 0){ start = 0; } if (end < position + word.length) { end = position + word.length; } if(end > content.length){ end = content.length; } slicesOfContent.push(mergeIntoSlice(content, start, end, indexOfContent)); } // sort slices in content by search text's count and hits' count slicesOfContent.sort(function (sliceLeft, sliceRight) { if (sliceLeft.searchTextCount !== sliceRight.searchTextCount) { return sliceRight.searchTextCount - sliceLeft.searchTextCount; } else if (sliceLeft.hits.length !== sliceRight.hits.length) { return sliceRight.hits.length - sliceLeft.hits.length; } else { return sliceLeft.start - sliceRight.start; } }); // select top N slices in content var upperBound = parseInt('1'); if (upperBound >= 0) { slicesOfContent = slicesOfContent.slice(0, upperBound); } // highlight title and content function highlightKeyword(text, slice) { var result = ''; var prevEnd = slice.start; slice.hits.forEach(function (hit) { result += text.substring(prevEnd, hit.position); var end = hit.position + hit.length; result += '' + text.substring(hit.position, end) + ''; prevEnd = end; }); result += text.substring(prevEnd, slice.end); return result; } var resultItem = ''; if (slicesOfTitle.length != 0) { resultItem += \"\" + highlightKeyword(title, slicesOfTitle[0]) + \"\"; } else { resultItem += \"\" + title + \"\"; } slicesOfContent.forEach(function (slice) { resultItem += \"\" + \"\" + highlightKeyword(content, slice) + \"...\" + \"\"; }); resultItem += \"\"; resultItems.push({ item: resultItem, searchTextCount: searchTextCount, hitCount: hitCount, id: resultItems.length }); } }) }; if (keywords.length === 1 && keywords[0] === \"\") { resultContent.innerHTML = '' } else if (resultItems.length === 0) { resultContent.innerHTML = '' } else { resultItems.sort(function (resultLeft, resultRight) { if (resultLeft.searchTextCount !== resultRight.searchTextCount) { return resultRight.searchTextCount - resultLeft.searchTextCount; } else if (resultLeft.hitCount !== resultRight.hitCount) { return resultRight.hitCount - resultLeft.hitCount; } else { return resultRight.id - resultLeft.id; } }); var searchResultList = ''; resultItems.forEach(function (result) { searchResultList += result.item; }) searchResultList += \"\"; resultContent.innerHTML = searchResultList; } } if ('auto' === 'auto') { input.addEventListener('input', inputEventFunction); } else { $('.search-icon').click(inputEventFunction); input.addEventListener('keypress', function (event) { if (event.keyCode === 13) { inputEventFunction(); } }); } // remove loading animation $(\".local-search-pop-overlay\").remove(); $('body').css('overflow', ''); proceedsearch(); } }); } // handle and trigger popup window; $('.popup-trigger').click(function(e) { e.stopPropagation(); if (isfetched === false) { searchFunc(path, 'local-search-input', 'local-search-result'); } else { proceedsearch(); }; }); $('.popup-btn-close').click(onPopupClose); $('.popup').click(function(e){ e.stopPropagation(); }); $(document).on('keyup', function (event) { var shouldDismissSearchPopup = event.which === 27 && $('.search-popup').is(':visible'); if (shouldDismissSearchPopup) { onPopupClose(); } });","categories":[],"tags":[]},{"title":"gradlew使用技巧","slug":"gradlew使用技巧","date":"2018-07-12T06:19:48.000Z","updated":"2018-07-12T06:19:48.536Z","comments":true,"path":"2018/07/12/gradlew使用技巧/","link":"","permalink":"https://lhldream.top/2018/07/12/gradlew使用技巧/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"漫步人生路","slug":"漫步人生路","date":"2018-07-12T01:37:32.000Z","updated":"2018-07-12T02:06:28.323Z","comments":true,"path":"2018/07/12/漫步人生路/","link":"","permalink":"https://lhldream.top/2018/07/12/漫步人生路/","excerpt":"","text":"所谓的坚强，无非是该听的话能听见，不该听的只当听不见，该想的事情想，不该想的忘掉。 现在才明白，要赚到足够令自己安心的钱，才能过上简单、安逸、自由的生活，才能让自己活得更有底气。所以，多花时间努力，少点功夫矫情。不要因为一时的心烦，做出一辈子的傻事。 以宽容之心对待别人，以豁达之心微笑面对生活。心情，是一种感情状态，拥有了好心情，也就拥有了自信，继而拥有了年轻和健康。就拥有了对未来生活的向往，充满期待，让我们拥有一份好心情吧，因为生活着就是幸运和快乐。 不要把自己活得像落难者一样，急着告诉所有人你的不幸。总有一天你会发现，酸甜苦辣要自己尝，漫漫人生要自己过，你所经历的在别人眼里都是故事，也别把所有的事都掏心掏肺的告诉别人，落单的恋人最怕过节，成长本来就是一个孤立无援的过程，你要努力强大起来，然后独当一面。 闭上眼睛，安静内心告诉自己。别人想什么，我们控制不了；别人做什么，我们也强求不了。唯一可以做的，就是尽心尽力做好自己的事，走自己的路，按自己的原则，好好生活。即使有人亏待了你，时间也不会亏待你，人生更加不会亏待你。 到了现在这个年纪，谁都不想再取悦了，跟谁在一起舒服就和谁在一起，包括朋友也是，累了就躲远一点。取悦别人远不如快乐自己。宁可孤独，也不违心。宁可抱憾，也不将就。 所谓坚持，不是四处寻求安慰后的坚持，不是被人说服后的坚持。而是无论如何，牙碎自己吞，流泪自己擦，摔了站起来继续走。真正的坚持，和别人永远发生不了关系，全靠自己每日擦拭。不要逢人便说：请鼓励我，我会坚持下去的。那不是坚持，是乞讨。 我们感到迷茫和困惑，是因为我们没有找到行为的价值。用一种信仰的精神、一种好的思想观念来照亮自己的内心，才能走出这个泥潭。人生的许多困惑、问题，都是缺乏正确的知见造成的。 人不论是面对快乐与幸福，还是痛苦与挫折，都不能沉迷其中，以致于最终毁灭了自己。人生没有永远的痛苦，也没有永远的快乐，坦然平和地去面对一切，这才是一个真正的强者。 人生一定要努力，努力是人生的一种精神状态。与其要求自己一定要成为一个什么样的人物，获得什么样的成就，不如磨练自己做一个努力的人。只有努力了才可能拥有，就算最终没能实现梦想也不会有太多的遗憾。往往最美的不是成功的那一刻，而是那段努力奋斗的过程。","categories":[{"name":"人生","slug":"人生","permalink":"https://lhldream.top/categories/人生/"}],"tags":[{"name":"七言","slug":"七言","permalink":"https://lhldream.top/tags/七言/"}]},{"title":"人生若只如初见","slug":"人生若只如初见","date":"2018-07-11T03:33:12.000Z","updated":"2018-07-12T01:17:54.374Z","comments":true,"path":"2018/07/11/人生若只如初见/","link":"","permalink":"https://lhldream.top/2018/07/11/人生若只如初见/","excerpt":"","text":"人生需要有拿得起的魄力，更需要放得下的勇气！因为拿得起是一种能力，放得下却是一种智慧。拿得起的是生存，放得下的生活！ 世间最大的抱憾，是我们近在咫尺，却不懂彼此的沉默；最大的错失，是明知前方无路，却固执得不想转弯。 过去的请把它忘记，放下追逐，清风就会来！你放开眉头，世界就会快乐！菩提本无树，明镜亦非台，本来无一物，何处惹尘埃！ 坦然面对世事，提起来千斤重，放得下二两轻。知从容：潇洒驰骋人生，事从容有余味，人从容有余年。学会放下，人生才精彩。 学会放下，懂得从容。人生在世，难免会遇到很多不如意，生活中出现不顺心的事情，不要心怀不满、怨气冲天，也不必耿耿于怀、一蹶不振，是福是祸都得面对，是好是坏都会过去。 不要在意别人在背后怎么看你说你，因为这些言语改变不了事实，却可能搅乱你的心。心如果乱了，一切就都乱了。理解你的人，不需要解释；不理解你的人，不用你解释。因为日久不一定生情，但一定见人心。 给自己一片没有退路的悬崖，就是给自己一个向生命高地冲锋的机会。清清楚楚看昨天，扎扎实实抓今天，高高兴兴看明天。向昨天要经验，向明天要动力，向今天要成果。记住昨天，思索明天，善待今天！ 人生像是一篇文章，离不开各式的标点。成长不是一路一路获得，乐观的人，他不管遇到什么困难，什么苦楚，什么意外，从不悲观，从不灰心，从不失志，总是顽强地在逆境中拼搏，在坎坷中迈进。总是坦坦然然，快快乐乐地历经人生的里程。 当一个人有了强烈的想要改变自我的意愿，或者逐渐的变的好起来之后，便会不自觉的对周围的一切产生要求。个人力量是有限的，只有实现了资源的优化组合，与志同道合者合作，才能实现仅凭自己无法达成的愿望。 跌倒的时候，要能认识障碍，勇敢站起；失意的时候，要能自我检讨，再次出发；困难的时候，要能冷静分析，寻找突破；彷徨的时候，要能看清目标，不变方向。","categories":[{"name":"人生","slug":"人生","permalink":"https://lhldream.top/categories/人生/"}],"tags":[{"name":"七言","slug":"七言","permalink":"https://lhldream.top/tags/七言/"}]},{"title":"唯有爱不可辜负","slug":"唯有爱不可辜负","date":"2018-07-11T03:33:12.000Z","updated":"2018-07-12T01:22:00.726Z","comments":true,"path":"2018/07/11/唯有爱不可辜负/","link":"","permalink":"https://lhldream.top/2018/07/11/唯有爱不可辜负/","excerpt":"","text":"爱一个人要用心，诚心相待，真心交流，恒心相守。在一起是一种缘分，不要轻易让喜欢你的人哭泣伤心，好好珍惜在一起的每一分钟，美好的回忆应该留给快乐和欢笑。 心动，是第一眼看见你时；心跳，因你的出现而加速；心情，随着你而喜怒哀乐。我怀念那些曾经，是因为那里有我最单纯的思念和最完整的心。 白头到老，你是我爱过，疼过，挣扎过，放弃过，却还义无反顾想爱的人。我们渴望的，是倾心呵护能够一生行走的爱情。 白头到老，你是我爱过，疼过，挣扎过，放弃过，却还义无反顾想爱的人。我们渴望的，是倾心呵护能够一生行走的爱情。 留住的叫幸福，流逝的叫遗憾：幸福的滋味是甜甜的，偶尔酸酸的；遗憾的感觉是苦苦的，偶尔辣辣的。“不合适”三字道，尽了多少男女之间的无可奈何。 有一种遇见，一眼凝眸，便是永恒；有一种心动，一生一次，只为一人；有一种相知，一声懂得，便是花开；有一种相守，默然相爱，寂然欢喜；有一种牵念，远在天涯，近在咫尺；有一种相思，一眼回眸，已然入骨；有一种情话，弱水三千只取一瓢；有一种约定，风雨同舟不离不弃；有一种誓言，时光尽头我在等你。 情不在拥有，用心珍惜，才能长久；爱，不在嘴边，挂念在心，方能相依。缘分，不论早晚，倾心，能相知；牵念，无论远近，倾情，才能唯一。爱，无声，只能用心默默聆听；情，无语，只能用心悄悄牵念。一种爱，是心的默契，一种情，是心的守望。 先爱的人先输，多爱的人多苦。世间最悲哀的事，莫过于两个人彼此倾心，却因为沉默而错过。一颗心属于一个人，爱情里什么是公平？爱的深，伤的深，在爱情里面是没有不公平。爱上不该爱的人，是永无天日的叹息，爱了不爱你的人，那么也就是眼泪决堤的开始。做一个简单的人，保持平常心，简单，快乐。 任何美丽而痛苦的回忆，都已成为昨日的乐章。寄情于那曾一度辉煌过的亲切记忆，辗转沉溺于早已虚幻如梦的往日悲欢，便不会看到威力的爱情芳草重生，即使日，月，星辰都从你身边溜走，至少你还拥有一片天空。 我爱你，没有什么目的，只是爱你。一辈子，就做一次自己。这一次，我想给你全世界；这一次，遍体鳞伤也没关系；这一次，用尽所有的勇敢；这一次，可以什么都不在乎。但只是这一次就够了。因为生命再也承受不起这么重的爱情。这一次，我愿意为你丢弃自尊，放下矜持，不管值不值得，不管爱得多卑微。","categories":[{"name":"人生","slug":"人生","permalink":"https://lhldream.top/categories/人生/"}],"tags":[{"name":"七言","slug":"七言","permalink":"https://lhldream.top/tags/七言/"}]},{"title":"情愿得一人心,白首不分离","slug":"情愿得一人心,白首不分离","date":"2018-07-11T03:33:12.000Z","updated":"2018-07-12T01:17:00.378Z","comments":true,"path":"2018/07/11/情愿得一人心,白首不分离/","link":"","permalink":"https://lhldream.top/2018/07/11/情愿得一人心,白首不分离/","excerpt":"","text":"你知道什么叫意外吗？就是我从没想过会遇见你，但我遇见了，我从没想过会爱你，但我还是爱了。 你的名字，是我读过最短的情诗。我很喜欢你，像春去秋来，海棠花开。 三生有幸遇见你，人生只有两次幸运就好，一次遇见你，一次走到底。 你不用多好，我喜欢就好，我不是很好，你不嫌弃就好。 喜欢你时，你每一句漫不经心的话，都在我心里开出漫山遍野的花。 因为喜欢你，借着你的光，瞧见了从未预见的世界。 我在这个世界上，走走停停，寻寻觅觅，就是为了和你相遇。 你看，这么多人，这么大的世界，我遇到了你，你也遇到了我，真好。 我对爱情的要求很简单：找一个我爱的也爱我的人手牵着手，从白天走到黑夜，从黑头发走到白头发；走累了就停下来，一起欣赏风景，一起唠嗑岁月。 我打算爱你很久很久，没有想要放弃的念头。","categories":[{"name":"人生","slug":"人生","permalink":"https://lhldream.top/categories/人生/"}],"tags":[{"name":"七言","slug":"七言","permalink":"https://lhldream.top/tags/七言/"}]},{"title":"关于爱情","slug":"关于爱情","date":"2018-07-11T03:33:12.000Z","updated":"2018-07-12T01:14:24.311Z","comments":true,"path":"2018/07/11/关于爱情/","link":"","permalink":"https://lhldream.top/2018/07/11/关于爱情/","excerpt":"","text":"希望以后的日子里，有人给你波澜不惊的爱情，有人陪你看细水长流的风景。 假如这一生我有99次好运，我愿意把96次都分给你，只留三次给自己。一次是遇见你，一次是我爱的你也恰好爱上我，一次是永远陪你走下去。 月亮极亮，云也十分温柔，所有对你的想念，都落入温软的呼吸里。 人的一生会遇到两个人，一个惊艳了时光，一个温柔了岁月。 记忆像是倒在掌心的水，不论你摊开还是紧握，终究还是会从指缝中，一滴一滴，流淌干净。 时间是奇妙的化学物质。可以抹平忧伤，可以抛下快乐，可以淡漠成长，可以见证生死。 有些事，过去了也就忘了。有些事，过不去也忘不了。忘不了，不是过不去，是过去了，也忘不了。 过自己想要的生活，上帝会让你付出代价。照顾好自己，爱自己才能爱好别人。如果你压抑，痛苦，忧伤，不自由，又怎么可能在心里腾出温暖的房间，让重要的人住在里面。如果一颗心千疮百孔，住在里面的人就会被雨水打湿。 一个人的小巷，有薄暮夕阳的浪漫，拾起阡陌边的稻草，放进嘴里嚼。一个人的海洋，有碧海蓝天的忧伤 ，踢着悠悠浮动的水草，让心洋轻轻荡。一个人的小街，有落雨缤纷的凄美，打着同样缤纷的伞，看电影散场的人，游走在纷扰的边缘。 时间是奇妙的化学物质。可以抹平忧伤，可以抛下快乐，可以淡漠成长，可以见证生死。","categories":[{"name":"人生","slug":"人生","permalink":"https://lhldream.top/categories/人生/"}],"tags":[{"name":"七言","slug":"七言","permalink":"https://lhldream.top/tags/七言/"}]},{"title":"时光旅行者","slug":"时光旅行者","date":"2018-07-11T03:33:12.000Z","updated":"2018-07-12T01:19:59.671Z","comments":true,"path":"2018/07/11/时光旅行者/","link":"","permalink":"https://lhldream.top/2018/07/11/时光旅行者/","excerpt":"","text":"真正的美丽，不是青春的容颜，而是绽放的心灵；不是俏丽的服饰，而是内在的自信；不是台前翩然的舞姿，而是幕后执著的坚守；不是巧言令色，而是真诚与人；不是物质的附庸，而是知识的光芒。活着自己的执着，活着自己的单纯，活着自己的痴醉，活着自己美丽的梦想。 不去追逐你所渴求，你将永远不会拥有。无论如何，感谢经历，生活的主题就是面对复杂保持欢喜。学会瞭望，给自己一份坚定，学会回眸，拂去浮躁。风雨中把头抬起，辉煌中把心放低。人生顺其自然就好，心安自然快乐。 无论你走得多远，平凡人生就在那里。每个人面前都有一条未知的路，不管你走上了哪条岔路，你一定要相信，态度和性格最终还是会把你引到那条成功的路上，从现在就开始努力吧！ 我们说过的话，做过的事，走过的路，遇过的人，每一个现在，都是我们以后的回忆。无须缅怀昨天，不必奢望明天，只要认真过好每个今天。说能说的话，做可做的事，走该走的路。脚踏实地，不漠视，不虚度，有缘无缘，一切随缘，保持一份好心情，就算心碎也要拥有最美的姿态。 我们说过的话，做过的事，走过的路，遇过的人，每一个现在，都是我们以后的回忆。无须缅怀昨天，不必奢望明天，只要认真过好每个今天。说能说的话，做可做的事，走该走的路。脚踏实地，不漠视，不虚度，有缘无缘，一切随缘，保持一份好心情，就算心碎也要拥有最美的姿态。 没有太晚的开始，不如就从今天行动。总有一天，那个一点一点可见的未来，会在你心里，也在你的脚下慢慢清透。生活，从不亏待每一个努力向上的人。 自己选择的路，再泥泞也要把它走完，或许，泥泞的路上也别有一番风景。所以，未来的路上，好好爱自己，好好珍惜自己。世界的一切不完美，坦然去面对。青春的逝去并不可怕，可怕的是失去了勇敢地热爱生活的心。 人生的奔跑，不在于瞬间的爆发，取决于途中的坚持。你纵有千百个理由放弃，却也总会找一个理由坚持下去。很多时候，成功就是多坚持一分钟，这一分钟不放弃，下一分钟就会有希望。只是我们不知道，这一分钟会在什么时候出现。所以，再苦再累，只要坚持往前走，属于你的风景终会出现。 生活从来不易，我们都是在不断的跌倒中逐渐站起来的。如今这些韬光养晦的艰难日子，都是在为某一天做铺垫，就像那句话说的：总要打败一些你所不喜欢的，才能得到某些你所渴望着的。 经历会使人变得更加成熟，让人懂得幸福与忧伤，快乐与痛苦的真正含义。其实，人们总是在登过幸福的顶峰，再跌落到不幸的深谷之后，才能品尝到快乐与痛苦的滋味，才能明白在这个世上，只有失去才最永恒。","categories":[{"name":"人生","slug":"人生","permalink":"https://lhldream.top/categories/人生/"}],"tags":[{"name":"七言","slug":"七言","permalink":"https://lhldream.top/tags/七言/"}]},{"title":"晚安,好梦","slug":"晚安,好梦","date":"2018-07-11T03:33:12.000Z","updated":"2018-07-12T01:21:07.884Z","comments":true,"path":"2018/07/11/晚安,好梦/","link":"","permalink":"https://lhldream.top/2018/07/11/晚安,好梦/","excerpt":"","text":"很多女孩一旦被人感动了，就会迅速爱上对方。但一直想说，浪漫不是爱，嘘寒问暖不是爱，陪聊陪笑不是爱，那只是泡妞的手段。真正的爱，是牺牲了自己某一部分，来成全你，让你变的更好。所以，不要找一个可以感动你的人，而要找爱你的人。爱不是感动，而是成全。 那时年纪小，有人说爱你，面红耳赤当做没听到。后来你长大了，有人说爱你，你便当成一句玩笑话。再后来，遇见的人越来越多，身边恋人换了又换，爱成了口头禅，不能说不重要，但好像也就只是那个样子而已了。忽然想起当年面红耳赤的自己，才明白，那才是遇见爱情时，最应该有的样子吧。 幸福并不是什么遥不可及的东西，只要安安静静、踏踏实实地过自己的生活，没有上下不定的忧虑，没有左右为难的恍惑，没有瞻前顾后的算计，没有担惊受怕的恐惧，没有求爷爷告奶奶的巴结，幸福的感觉便时时在心头荡漾。幸福其实很简单，只要你的心舍得简单。 真正的爱从来无关风月，只在平淡的流年里变作永恒。 所谓幸福，就是一个笨蛋遇到一个傻瓜，引来无数人的羡慕和妒嫉。 人生，不过是一辆开往尽头的列车，愿有人站在秋天的站台，与你共赴温暖的将来。 相信爱情的人，迟早有一天会遇见爱情。 时光总有一天会将你我拆散，可是即便如此，在那个时刻之前，也让我们在一起吧。 因为有你陪，再孤单的绝望里还是会藏着柳暗花明的盼望。 想看你清早起来迷迷瞪瞪的眼神，想沿着你鼻梁勾勒，想被你紧紧牵住，赖过每一个周六周日阳光正好空气清新的早晨，好像所有不快乐都被穿梭的微风剪碎了，有你太好。","categories":[{"name":"人生","slug":"人生","permalink":"https://lhldream.top/categories/人生/"}],"tags":[{"name":"七言","slug":"七言","permalink":"https://lhldream.top/tags/七言/"}]},{"title":"没有到不了的明天","slug":"没有到不了的明天","date":"2018-07-11T03:33:12.000Z","updated":"2018-07-12T00:45:49.400Z","comments":true,"path":"2018/07/11/没有到不了的明天/","link":"","permalink":"https://lhldream.top/2018/07/11/没有到不了的明天/","excerpt":"","text":"人生需要有拿得起的魄力，更需要放得下的勇气！因为拿得起是一种能力，放得下却是一种智慧。拿得起的是生存，放得下的生活！ 世间最大的抱憾，是我们近在咫尺，却不懂彼此的沉默；最大的错失，是明知前方无路，却固执得不想转弯。 过去的请把它忘记，放下追逐，清风就会来！你放开眉头，世界就会快乐！菩提本无树，明镜亦非台，本来无一物，何处惹尘埃！ 坦然面对世事，提起来千斤重，放得下二两轻。知从容：潇洒驰骋人生，事从容有余味，人从容有余年。学会放下，人生才精彩。 学会放下，懂得从容。人生在世，难免会遇到很多不如意，生活中出现不顺心的事情，不要心怀不满、怨气冲天，也不必耿耿于怀、一蹶不振，是福是祸都得面对，是好是坏都会过去。 不要在意别人在背后怎么看你说你，因为这些言语改变不了事实，却可能搅乱你的心。心如果乱了，一切就都乱了。理解你的人，不需要解释；不理解你的人，不用你解释。因为日久不一定生情，但一定见人心。 给自己一片没有退路的悬崖，就是给自己一个向生命高地冲锋的机会。清清楚楚看昨天，扎扎实实抓今天，高高兴兴看明天。向昨天要经验，向明天要动力，向今天要成果。记住昨天，思索明天，善待今天！ 人生像是一篇文章，离不开各式的标点。成长不是一路一路获得，乐观的人，他不管遇到什么困难，什么苦楚，什么意外，从不悲观，从不灰心，从不失志，总是顽强地在逆境中拼搏，在坎坷中迈进。总是坦坦然然，快快乐乐地历经人生的里程。 当一个人有了强烈的想要改变自我的意愿，或者逐渐的变的好起来之后，便会不自觉的对周围的一切产生要求。个人力量是有限的，只有实现了资源的优化组合，与志同道合者合作，才能实现仅凭自己无法达成的愿望。 跌倒的时候，要能认识障碍，勇敢站起；失意的时候，要能自我检讨，再次出发；困难的时候，要能冷静分析，寻找突破；彷徨的时候，要能看清目标，不变方向。","categories":[{"name":"人生","slug":"人生","permalink":"https://lhldream.top/categories/人生/"}],"tags":[{"name":"七言","slug":"七言","permalink":"https://lhldream.top/tags/七言/"}]},{"title":"人生悟语","slug":"人生悟语","date":"2018-07-11T03:33:12.000Z","updated":"2018-07-12T01:18:50.804Z","comments":true,"path":"2018/07/11/人生悟语/","link":"","permalink":"https://lhldream.top/2018/07/11/人生悟语/","excerpt":"","text":"生命太短，一分钟都不能留给那些让你不快的人或事。一个人时，善待自己；两个人时，善待对方。 一路上走来，我们总会患得患失，总会放弃不了某件事，总是天真地以为：只要坚持就有结果，只要执着就有希望。 世界上最动人的情话就是：你是我一个人的，爱情最美丽的誓言就是：我在时光的尽头等你。 做人要有平常心，这一生，最无法预见的，是遇见。我们不知在哪一眼，就是开始。这一生，最无法告别的，是离别。不知哪一眼，就是诀别。从遇见到诀别，人生如此奇妙的静静谱写着悲欢。 如果坚强的人落泪了，一定是撑不下去了；如果执着的心放弃了，一定是伤得彻底了。昨天永远是过去式，今天永远是进行式，明天永远是幻想式，天天都是方程式。 若只是初见，一切美好都不会遗失。很多时候，初见，惊艳。蓦然回首，却已是物是人非，沧海桑田。 不恋尘世浮华，不写红尘纷扰，不叹世道苍凉，不惹情思哀怨，闲看花开，静待花落，冷暖自知，干净如始。 人生是条单行线，是条只能前行无法倒退或是逆向行驶的路径，面对人生，其实我们可以做的事情很少，我们想要主宰自己的人生，惟一可以做的事情就是往前走，继续往前走，永远往前走，千万别想到向后转，因为，你的后面根本就已经无路可退。 总有许多事，需要你一个人扛。别畏惧孤独，它能帮你划清内心的清浊，是你无法拒绝的命运历程；别躲避困苦，莫让冷世的尘埃，冰封你的笑容，迟滞你的步履。走得越久，时光越老，人心越淡。忘不掉昨天，它就是束缚你的阴影；向往着明天，你才能描绘它的模样。 我们都还年轻，多走几步路，多欣赏下沿途的风景，不要急于抵达目的地而错过了流年里温暖的人和物；趁我们都还年轻，多说些浪漫的话语，多做些幼稚的事情，不要嫌人笑话错过了生命中最美好的片段和场合；趁我们都还年轻，把距离缩短，把时间延长。趁我们都还年轻，多做些我们想要做的任何事。","categories":[{"name":"人生","slug":"人生","permalink":"https://lhldream.top/categories/人生/"}],"tags":[{"name":"七言","slug":"七言","permalink":"https://lhldream.top/tags/七言/"}]},{"title":"珍惜生活","slug":"珍惜生活","date":"2018-07-11T03:33:12.000Z","updated":"2018-07-12T01:24:50.338Z","comments":true,"path":"2018/07/11/珍惜生活/","link":"","permalink":"https://lhldream.top/2018/07/11/珍惜生活/","excerpt":"","text":"决定一个人成就的，不是天分，也不是运气，而是坚持和付出。是不停地做，重复的做，用心去做。当你真的努力了，付出了，你会发现自己潜力无限！记得每天鼓励自己，越勤奋，越幸运，越感恩，越幸福！早安 人生中出现的一切，都无法拥有，只能经历。深知这一点的人，就会懂得：无所谓失去，而只是经过而已；亦无所谓失败，而只是经验而已。用一颗浏览的心，去看待人生，一切的得与失、隐与显，都是风景与心情。 人生需要看透，但不能看破。事情看透，你就明白该如何进行；人情看透，你就明白该如何相处；事情看破，你就不想做事了；人情看破，你就不想做人了。所以，只要用点心，其余只是接受。要做到不去在意他人的言语很困难吧？嘴巴是别人的，人生是自己的。 或许，我们可以做的，只是让自己勇敢的活着。有人说，只有自己成为公主，才能吸引王子。而我想说，我们要努力让自己比公主还要优秀，至于是否可以吸引王子，就不是我们考虑的范围了。或许随遇而安，顺其自然，并不能带给我们想要的生活，但是，又有什么关系呢。快乐的活着，就很好。 人和人相遇，靠的是缘分；人和人相处，靠的是诚意。知遇着，便是幸福；相惜着，便是温暖。这世间，没有谁对不起谁，只有谁不懂得珍惜谁。相遇最美，今生若能遇见，就是难得的缘份和幸福。无论亲情、友情还是爱情，自然而然留在身边的，才是最真的，最长久的。遇见，只是一个开始；珍惜，才能相伴一生。 有人说，听到了候鸟的叫声，下一个期待中的季节就不远了。我这只候鸟，在青春的纬度里，继续着我青春的梦。生命不在于活得长与短，而在于顿悟的早与晚。 人生就像一本深刻丰厚的书，汇聚着生命的整个过程，每一页都记载着深邃博大的生活内容。人生的酸甜苦辣、喜怒哀乐全部藴含在字里行间。人生拥有太多的回忆，无论经历如何坎坷，滋味如何痛苦，唯一不变的还是那颗向往美好的心。 有时候不是不懂，只是不想懂；有时候不是不知道，只是不想说出来；有时候不是不明白，而是明白了也无能为力，于是就保持了沉默。有些话，适合藏在心里；有些痛苦适合无声无息的忘记；有些回忆，只适合偶尔拿出来回味。很多事，当经历过，自己知道就好。 人生千灯万盏，不如心灯一盏。人活得累，是因为能左右你心情的东西太多。天气的变化，人情的冷暖，不同的风景都会影响你的心情。而他们都是你无法左右的。看淡了，天无非阴晴，人不过聚散，地只是高低。不悲不喜，便是晴天。 任何时候都要记得，给人生留点余地，得到时不自喜，失去时不抑郁。留一点好处让别人占，留一点道路让别人走，留一点时间让自己思考。","categories":[{"name":"人生","slug":"人生","permalink":"https://lhldream.top/categories/人生/"}],"tags":[{"name":"七言","slug":"七言","permalink":"https://lhldream.top/tags/七言/"}]},{"title":"一切事都赶快做,别去等","slug":"一切事都赶快做,别去等","date":"2018-07-11T03:33:12.000Z","updated":"2018-07-12T01:23:22.954Z","comments":true,"path":"2018/07/11/一切事都赶快做,别去等/","link":"","permalink":"https://lhldream.top/2018/07/11/一切事都赶快做,别去等/","excerpt":"","text":"烟波流转，流云翩跹，是你的微笑在我心海流连；青山如黛，绿水盈盈，是你的执著让我无悔等待；弦月冉冉，繁星点点，是你的温暖让我驻足今生。只因相识太美所以牵念一生，只为真心难觅所以无法忘怀。就让我携你手趟过千年的风霜雪雨，就让我陪你到地老天荒，日落星沉；执笔为你眷写沧海桑田，岁月轮回。 静好的时光里，总是有一个人，渡你一生的回忆。有人说，一个人最好记性不要太好，因为回忆越多，幸福感越少。我期许，有爱的地方，便有美丽，便有温柔的阳光，空气和水。而在每个清晨，我第一眼的凝望的，就是窗前那抹最暖和的微光，那是我最美的祝福。 因为有阳光，我的世界，风轻云淡，柔软纯白。时光静走，我终于明白，岁月静好，原来流年里的那些寂寞，那么满。谁的感伤也摧毁不了青春的高墙，有些人儿注定别离，相遇只是幻想，我们都不过是在对流年撒谎，因为寂寞很孤单，爱很简单，生活一直很平淡。而那些苍白的岁月里，那些不具名的寂寞，都是虚无荒诞的谎言。 因为有你，所以不必寂寞，是的，那些寂寞，不过是卑微的情愫，因为最后，有人会陪我们一起看细水长流，并用用细碎的步子与我们一起奔跑，一直到天涯海角。那时候，我们会发现怀念不是唯一的寄托，期待不是唯一的承诺，哀伤是奢望的情感，但快乐却不是。只要心有所依，依旧岁月无恙。 我相信，终会有一个人，会明白我内心的，那所有纯白与柔软，明白我的寂寞与一切不具名的情感，心疼我的心疼，并且会陪我一起看花开花谢，云起云归。如果可以，与时光对舞，我愿在这样温暖的时光里，任心若云归，年华静美，然后，慢慢老去。静静，听见花开的声音，听见，幸福的声音。衣破尘埃，破颜一笑，是清欢，亦是美好。 薄凉的声色里，也曾与时光邂逅，与寂寞有染，抹不去画地为牢的孤单，在流年的怀抱里，在空城里，闭上眼，静静沉睡，记忆里，那些生如夏花的绚烂焚尽，如秋叶静美而凋零。这世上，总有一些东西，不死，不老。那如诗如画的流年总会成就出一番隽永的味道。 纵使人会老，但最诚挚的爱不会老去，我时常在想，如果变老，我们是不是，还会有当初，那最美的年华的美好。是不是，还能坦然的微笑。张爱玲说：“喜欢一个人，会卑微到尘埃里，然后开出花来。”生命中，总有些人，安然而来，静静守候，不离不弃；也有些人，浓烈如酒，疯狂似醉，却是醒来无处觅，来去都如风，梦过无痕。红尘芸芸，总会有人愿意，为我们卑微到尘埃里，那是我们一生的眷属。 你若一直在，我便一直爱，不乱于心，不困于情，不畏将来，不念过往，如此，安好。我知道，时光会记得，那些始终如一，那些年华的美好，某些东西，深藏在心中，永远不会老去。你是我不停的追逐，你是我不舍的想念。花开，叶落。站在未来等你，站在过去思念。一曲筝音悠扬，在绵绵的月下流转；一缕清浅幽香，在轻盈的风里飘荡。就让我，倾此一生，沫你欢颜 时光悠悠然飞逝，天际的月儿圆了又缺，也不知过了多少岁月。我就这样飘摇在这座城里，忘记了时间，也忘记了走出去。渐渐的，心里也就有了那么一座城，孤独堆砌起城墙，清冷构筑成屋舍。 时光流逝，风卷着落叶在不经意间滑落，摇曳着深秋的寂寥。一场秋雨过后，北方的秋天以有了些许的寒意，万物都删繁就简起来，装点着着这一季的冷清。季节的转换间，总会演绎着繁华与落寂，而我们，就在这流年的急景中，看着过往匆匆，细数流年的悲喜，以一颗安然的心，沉淀着红尘的浮华。","categories":[{"name":"人生","slug":"人生","permalink":"https://lhldream.top/categories/人生/"}],"tags":[{"name":"七言","slug":"七言","permalink":"https://lhldream.top/tags/七言/"}]},{"title":"亲爱的对不起!我又在想你了~","slug":"亲爱的对不起!我又在想你了~","date":"2018-07-11T03:33:12.000Z","updated":"2018-07-12T01:15:49.909Z","comments":true,"path":"2018/07/11/亲爱的对不起!我又在想你了~/","link":"","permalink":"https://lhldream.top/2018/07/11/亲爱的对不起!我又在想你了~/","excerpt":"","text":"没有机会回味，更没机会后悔，人生竟只有一张单程车票，任何叹息愧疚都无法使岁月的车轮逆转，所以，一切事都赶快做，别去等，有这样一句话：除了死，什么都不宜迟。 不要去等明天，不要去相信永远，你所能做的，就是眼前。你所爱，为尔所为。没有人会等你，在这风雨飘摇的人生路上。你所能做的，就是让自己更快、更强。 生活就像一面镜子。你笑，它便笑；你哭，它也哭。心存善念，便会迎来更多美好的事物。 人生最遗憾的莫过于轻易地放弃了不该放弃的，固执地坚持了不该坚持的。 收拾起心情，继续走吧，错过花，你将收获雨，错过这一个，你才会遇到下一个。 生命是一场幻觉，而你是我的光。 像风一样，淡出你的生命。这样就好。 尝试去把别人拍过来的砖砌成结实的地基，生活就不会那么辛苦了。 人生平静便是福，平静生活，真实而洒脱。生命太短，最没有意义的就是不情愿的重复，所以人生第一要义不是天天幸福，而是不烦，喜怒哀思悲恐惊，酸甜苦辣咸麻涩鲜，都是人生经验。 因为平淡，我们的爱情有时会游离原本温馨的港湾;因为好奇，我们的行程会在某个十字路口不经意的拐弯，就在你意欲转身的刹那，你会听见身后有爱情在低声地哭泣。","categories":[{"name":"人生","slug":"人生","permalink":"https://lhldream.top/categories/人生/"}],"tags":[{"name":"七言","slug":"七言","permalink":"https://lhldream.top/tags/七言/"}]},{"title":"逗比老爸的逗比日常","slug":"逗比老爸的逗比日常","date":"2018-07-11T01:33:12.000Z","updated":"2018-07-11T03:16:38.547Z","comments":true,"path":"2018/07/11/逗比老爸的逗比日常/","link":"","permalink":"https://lhldream.top/2018/07/11/逗比老爸的逗比日常/","excerpt":"","text":"","categories":[{"name":"娱乐","slug":"娱乐","permalink":"https://lhldream.top/categories/娱乐/"}],"tags":[{"name":"搞笑","slug":"搞笑","permalink":"https://lhldream.top/tags/搞笑/"}]},{"title":"电影网站推荐","slug":"2018-01-03-how-to-write","date":"2018-01-03T03:33:12.000Z","updated":"2018-07-11T05:51:02.119Z","comments":true,"path":"2018/01/03/2018-01-03-how-to-write/","link":"","permalink":"https://lhldream.top/2018/01/03/2018-01-03-how-to-write/","excerpt":"","text":"这里推荐几个自己常用的电影网站 DE下载电影首发站BT之家","categories":[{"name":"娱乐","slug":"娱乐","permalink":"https://lhldream.top/categories/娱乐/"}],"tags":[{"name":"电影","slug":"电影","permalink":"https://lhldream.top/tags/电影/"}]}]}